a:2:{s:7:"current";a:8:{s:4:"date";a:2:{s:7:"created";i:1390904705;s:8:"modified";i:1390904731;}s:7:"creator";s:5:"lixin";s:4:"user";s:5:"uahoo";s:11:"last_change";a:7:{s:4:"date";i:1390904731;s:2:"ip";s:14:"10.221.135.120";s:4:"type";s:1:"E";s:2:"id";s:32:"git_branch_model:git_pull_rebase";s:4:"user";s:5:"uahoo";s:3:"sum";s:0:"";s:5:"extra";s:0:"";}s:8:"internal";a:2:{s:5:"cache";b:1;s:3:"toc";b:1;}s:11:"description";a:1:{s:8:"abstract";s:503:"Pull with Rebase
Along with the facility of merge commits comes the need to make
them wisely. The notion of what a merge should indicate with
respect to content is subjective and varies as a matter of version
control discipline and style, but generally you want a merge to
point out a substantive combination of two lines of development.
Certainly, too many merges creates a commit graph that is difficult
to read, thus reducing the usefulness of the structural merge
feature itself. In this context,â€¦";}s:8:"relation";a:1:{s:10:"firstimage";s:0:"";}s:11:"contributor";a:1:{s:5:"uahoo";s:5:"lixin";}}s:10:"persistent";a:5:{s:4:"date";a:2:{s:7:"created";i:1390904705;s:8:"modified";i:1390904731;}s:7:"creator";s:5:"lixin";s:4:"user";s:5:"uahoo";s:11:"last_change";a:7:{s:4:"date";i:1390904731;s:2:"ip";s:14:"10.221.135.120";s:4:"type";s:1:"E";s:2:"id";s:32:"git_branch_model:git_pull_rebase";s:4:"user";s:5:"uahoo";s:3:"sum";s:0:"";s:5:"extra";s:0:"";}s:11:"contributor";a:1:{s:5:"uahoo";s:5:"lixin";}}}