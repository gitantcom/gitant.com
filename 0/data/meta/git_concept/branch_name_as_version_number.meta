a:2:{s:7:"current";a:9:{s:4:"date";a:2:{s:7:"created";i:1393311027;s:8:"modified";i:1393324361;}s:7:"creator";s:5:"lixin";s:4:"user";s:5:"uahoo";s:11:"last_change";a:7:{s:4:"date";i:1393324361;s:2:"ip";s:13:"10.221.135.74";s:4:"type";s:1:"E";s:2:"id";s:41:"git_concept:branch_name_as_version_number";s:4:"user";s:5:"uahoo";s:3:"sum";s:19:"[refs 和 symrefs] ";s:5:"extra";s:0:"";}s:11:"contributor";a:1:{s:5:"uahoo";s:5:"lixin";}s:5:"title";s:33:"如何识别git中的一次提交";s:11:"description";a:2:{s:15:"tableofcontents";a:4:{i:0;a:4:{s:3:"hid";s:33:"如何识别git中的一次提交";s:5:"title";s:33:"如何识别git中的一次提交";s:4:"type";s:2:"ul";s:5:"level";i:2;}i:1;a:4:{s:3:"hid";s:18:"绝对命名方式";s:5:"title";s:18:"绝对命名方式";s:4:"type";s:2:"ul";s:5:"level";i:3;}i:2;a:4:{s:3:"hid";s:16:"refs_和_symrefs";s:5:"title";s:16:"refs 和 symrefs";s:4:"type";s:2:"ul";s:5:"level";i:3;}i:3;a:4:{s:3:"hid";s:12:"相对命名";s:5:"title";s:12:"相对命名";s:4:"type";s:2:"ul";s:5:"level";i:3;}}s:8:"abstract";s:385:"如何识别git中的一次提交

版本控制中准确标识出某次变更是基本功能。比如，创建分支时，要选择某次提交点作为分叉点; 输入两次版本号才能比较并行开发的代码；修改git提交的历史，也需要先收集提交版本记录。git里，你确定一次提交既可以用明确的标识，也可以用相对的关系来标识。";}s:8:"internal";a:2:{s:5:"cache";b:1;s:3:"toc";b:1;}s:8:"relation";a:1:{s:10:"firstimage";s:0:"";}}s:10:"persistent";a:5:{s:4:"date";a:2:{s:7:"created";i:1393311027;s:8:"modified";i:1393324361;}s:7:"creator";s:5:"lixin";s:4:"user";s:5:"uahoo";s:11:"last_change";a:7:{s:4:"date";i:1393324361;s:2:"ip";s:13:"10.221.135.74";s:4:"type";s:1:"E";s:2:"id";s:41:"git_concept:branch_name_as_version_number";s:4:"user";s:5:"uahoo";s:3:"sum";s:19:"[refs 和 symrefs] ";s:5:"extra";s:0:"";}s:11:"contributor";a:1:{s:5:"uahoo";s:5:"lixin";}}}