a:35:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:12:"提交范围";i:1;i:3;i:2;i:4;}i:2;i:4;}i:2;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:4;}i:3;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4;}i:4;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:306:"现在你已经可以指明单次的提交，让我们来看看怎样指明一定范围的提交。这在你管理分支的时候尤显重要——如果你有很多分支，你可以指明范围来圈定一些问题的答案，比如：“这个分支上我有哪些工作还没合并到主分支的？”";}i:2;i:26;}i:5;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:332;}i:6;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:334;}i:7;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:6:"双点";i:1;i:3;i:2;i:334;}i:2;i:334;}i:8;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:334;}i:9;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:334;}i:10;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:223:"最常用的指明范围的方法是双点的语法。这种语法主要是让 Git 区分出可从一个分支中获得而不能从另一个分支中获得的提交。例如，假设你有类似于图 6-1 的提交历史。";}i:2;i:350;}i:11;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:573;}i:12;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:573;}i:13;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:43:" 图 6-1. 范围选择的提交历史实例";}i:2;i:578;}i:14;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:621;}i:15;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:621;}i:16;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:425:"你想要查看你的试验分支上哪些没有被提交到主分支，那么你就可以使用 master..experiment 来让 Git 显示这些提交的日志——这句话的意思是“所有可从experiment分支中获得而不能从master分支中获得的提交”。为了使例子简单明了，我使用了图标中提交对象的字母来代替真实日志的输出，所以会显示：
$ git log master..experiment
D
C";}i:2;i:623;}i:17;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1048;}i:18;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1048;}i:19;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:257:"另一方面，如果你想看相反的——所有在 master 而不在 experiment 中的分支——你可以交换分支的名字。experiment..master 显示所有可在 master 获得而在 experiment 中不能的提交：
$ git log experiment..master
F
E";}i:2;i:1051;}i:20;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1308;}i:21;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1308;}i:22;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:204:"这在你想保持 experiment 分支最新和预览你将合并的提交的时候特别有用。这个语法的另一种常见用途是查看你将把什么推送到远程：
$ git log origin/master..HEAD";}i:2;i:1311;}i:23;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1515;}i:24;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1515;}i:25;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:460:"这条命令显示任何在你当前分支上而不在远程origin 上的提交。如果你运行 git push 并且的你的当前分支正在跟踪 origin/master，被git log origin/master..HEAD 列出的提交就是将被传输到服务器上的提交。 你也可以留空语法中的一边来让 Git 来假定它是 HEAD。例如，输入 git log origin/master.. 将得到和上面的例子一样的结果—— Git 使用 HEAD 来代替不存在的一边。";}i:2;i:1518;}i:26;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1978;}i:27;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1978;}i:28;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:29:":gitcommand:git-diff-help.png";i:1;s:8:"git_diff";i:2;N;i:3;s:3:"500";i:4;N;i:5;s:5:"cache";i:6;s:7:"details";}i:2;i:1983;}i:29;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"
";}i:2;i:2029;}i:30;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:42:":gitcommand:git-log-for-upload-smaller.png";i:1;s:7:"git_log";i:2;N;i:3;s:3:"500";i:4;N;i:5;s:5:"cache";i:6;s:7:"details";}i:2;i:2030;}i:31;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:0:"";}i:2;i:2088;}i:32;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2088;}i:33;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2088;}i:34;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:2088;}}