a:31:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:0;}i:2;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:93:"Merge  :takes all the changes in one branch and merge them into another branch in one commit.";}i:2;i:2;}i:3;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:95;}i:4;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:82:"
Rebase :says I want the point at which I branched to move to a new starting point";}i:2;i:97;}i:5;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:179;}i:6;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:181;}i:7;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:15:"rebase VS merge";i:1;i:3;i:2;i:183;}i:2;i:183;}i:8;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:183;}i:9;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:183;}i:10;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:366:"In general, it is a good practice to use git rebase when you are working on non-published things - local things that you have not pushed (or you have pushed to a place that other people are not pulling from). Rebase rewrites history, so people pulling will have issues if you rebase, while merge does not rewrite history, thus does not cause issues for other people.";}i:2;i:210;}i:11;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:576;}i:12;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:576;}i:13;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:275:"While merge will try to merge your changes using a merge strategy, rebase will just fetch the HEAD of what you are rebasing against and then try to apply your changes. Since it loses the time of when your change was made, it can not solve conflicts as effectively as a merge.";}i:2;i:578;}i:14;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:853;}i:15;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:853;}i:16;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:218:"Usually rebase is not much more complicated, unless you are in a relatively small codebase where a lot of developers are working at the same time and stepping on each others toes OR you leave your code for a long time.";}i:2;i:855;}i:17;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1073;}i:18;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1073;}i:19;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:54:"I think this is a good resource to read about rebase: ";}i:2;i:1075;}i:20;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:86:"http://www.jarrodspillers.com/2009/08/19/git-merge-vs-git-rebase-avoiding-rebase-hell/";i:1;N;}i:2;i:1129;}i:21;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1215;}i:22;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1215;}i:23;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:"Jarrod defines the ";}i:2;i:1217;}i:24;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:1236;}i:25;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"rebase rule";}i:2;i:1237;}i:26;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:1248;}i:27;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:75:" very good: Donâ€™t rebase branches you have shared with another developer.";}i:2;i:1249;}i:28;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1324;}i:29;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1326;}i:30;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:1326;}}