a:215:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:18:"任务分支模式";i:1;i:1;i:2;i:1;}i:2;i:1;}i:2;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:1;}i:3;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1;}i:4;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:51:":git_branch_model:git-workflow-feature-branch-1.png";i:1;s:0:"";i:2;s:6:"center";i:3;N;i:4;N;i:5;s:5:"cache";i:6;s:7:"details";}i:2;i:32;}i:5;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:90;}i:6;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:90;}i:7;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:1;i:1;s:7:"#0000EE";}i:2;i:1;i:3;s:12:"<fc #0000EE>";}i:2;i:93;}i:8;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:148:"一旦熟悉了中央集中式的git开发流程，再使用任务分支模式开发就容易多了，并加强了协作性而且简便了沟通。
";}i:2;i:3;i:3;s:148:"一旦熟悉了中央集中式的git开发流程，再使用任务分支模式开发就容易多了，并加强了协作性而且简便了沟通。
";}i:2;i:105;}i:9;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:4;i:1;s:4:"#ff0";}i:2;i:4;i:3;s:5:"</fc>";}i:2;i:253;}i:10;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:258;}i:11;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:258;}i:12;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:1;i:1;s:7:"#0000EE";}i:2;i:1;i:3;s:12:"<fc #0000EE>";}i:2;i:261;}i:13;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:370:"中央集中模式所有的变更都在master上开发，任务分支模式所有变更都在分支上branch开发完成。所以，容易实现并行开发，在多人共同开发同一任务时，不会破坏主干基线。大家都在不同的分支上开发，互相不干扰，主干（master)不会有无法编译的代码，持续集成就需要这种的特性。";}i:2;i:3;i:3;s:370:"中央集中模式所有的变更都在master上开发，任务分支模式所有变更都在分支上branch开发完成。所以，容易实现并行开发，在多人共同开发同一任务时，不会破坏主干基线。大家都在不同的分支上开发，互相不干扰，主干（master)不会有无法编译的代码，持续集成就需要这种的特性。";}i:2;i:273;}i:14;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:4;i:1;s:4:"#ff0";}i:2;i:4;i:3;s:5:"</fc>";}i:2;i:643;}i:15;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:648;}i:16;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:648;}i:17;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:1;i:1;s:7:"#0000EE";}i:2;i:1;i:3;s:12:"<fc #0000EE>";}i:2;i:652;}i:18;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:398:"每个需求都用分支来开发，就能有效利用pull request，这样就可以在分支上发起讨论，在分支合并入项目主干前，其他工程师也有机会讨论这个特性。如果在这个需求的开发中，你还有一些疑问和想法，你可以创建一个pull request咨询你的同事。重点就是： pull request 让团队成员彼此讨论代码变得很轻松。";}i:2;i:3;i:3;s:398:"每个需求都用分支来开发，就能有效利用pull request，这样就可以在分支上发起讨论，在分支合并入项目主干前，其他工程师也有机会讨论这个特性。如果在这个需求的开发中，你还有一些疑问和想法，你可以创建一个pull request咨询你的同事。重点就是： pull request 让团队成员彼此讨论代码变得很轻松。";}i:2;i:664;}i:19;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:4;i:1;s:4:"#ff0";}i:2;i:4;i:3;s:5:"</fc>";}i:2;i:1062;}i:20;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1067;}i:21;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1069;}i:22;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:12:"流程描述";i:1;i:2;i:2;i:1069;}i:2;i:1069;}i:23;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:1069;}i:24;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1069;}i:25;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:1;i:1;s:7:"#0000EE";}i:2;i:1;i:3;s:12:"<fc #0000EE>";}i:2;i:1094;}i:26;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:446:"任务分支模式任然需要一个中央仓库，master分支存放的是稳定的基线版本。相对于中央集中模式中开发者直接向本地主干master提交变更，在任务分支模式里，每当有新任务的时候，工程师在本地创建新分支，并在分支上提交变更。而且分支的名字应该能是描述性的，说清楚说明分支的目的。比如分支名称：animated-menu-items 或者 issue-#1061。";}i:2;i:3;i:3;s:446:"任务分支模式任然需要一个中央仓库，master分支存放的是稳定的基线版本。相对于中央集中模式中开发者直接向本地主干master提交变更，在任务分支模式里，每当有新任务的时候，工程师在本地创建新分支，并在分支上提交变更。而且分支的名字应该能是描述性的，说清楚说明分支的目的。比如分支名称：animated-menu-items 或者 issue-#1061。";}i:2;i:1106;}i:27;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:4;i:1;s:4:"#ff0";}i:2;i:4;i:3;s:5:"</fc>";}i:2;i:1552;}i:28;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1557;}i:29;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1557;}i:30;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:1;i:1;s:7:"#0000EE";}i:2;i:1;i:3;s:12:"<fc #0000EE>";}i:2;i:1561;}i:31;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:145:"对于Git来说，master分支和任务分支在技术实现上没什么不一样。 工程师在任务分支上编辑、缓存、提交变更。";}i:2;i:3;i:3;s:145:"对于Git来说，master分支和任务分支在技术实现上没什么不一样。 工程师在任务分支上编辑、缓存、提交变更。";}i:2;i:1573;}i:32;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:4;i:1;s:4:"#ff0";}i:2;i:4;i:3;s:5:"</fc>";}i:2;i:1718;}i:33;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1723;}i:34;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1723;}i:35;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:1;i:1;s:7:"#0000EE";}i:2;i:1;i:3;s:12:"<fc #0000EE>";}i:2;i:1726;}i:36;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:300:"任务分支每天也应该将变更提交到中央仓库的分支上，其他工程师在中央仓库分支上就可以看到新功能的代码，同时起到备份的作用。中央仓库中master分支是众所周知的唯一特殊分支，工程师提交其他临时分支，不会引发问题。";}i:2;i:3;i:3;s:300:"任务分支每天也应该将变更提交到中央仓库的分支上，其他工程师在中央仓库分支上就可以看到新功能的代码，同时起到备份的作用。中央仓库中master分支是众所周知的唯一特殊分支，工程师提交其他临时分支，不会引发问题。";}i:2;i:1738;}i:37;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:4;i:1;s:4:"#ff0";}i:2;i:4;i:3;s:5:"</fc>";}i:2;i:2038;}i:38;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2043;}i:39;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2045;}i:40;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:27:"合并请求(Pull Requests)";i:1;i:3;i:2;i:2045;}i:2;i:2045;}i:41;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:2045;}i:42;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2045;}i:43;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:1;i:1;s:7:"#0000EE";}i:2;i:1;i:3;s:12:"<fc #0000EE>";}i:2;i:2083;}i:44;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:369:" 任务分支除了隔离并行开发，而且通过pull request 还可以使得代码变更讨论成为可能。一旦完成了某个任务， 你不要立即把它合并回主干。你把本地分支提交到中心仓库上，发起一个合并请求，要求合并到中心仓库master主干上。在合并回主干前，其他开发者有机会评审你的代码。";}i:2;i:3;i:3;s:369:" 任务分支除了隔离并行开发，而且通过pull request 还可以使得代码变更讨论成为可能。一旦完成了某个任务， 你不要立即把它合并回主干。你把本地分支提交到中心仓库上，发起一个合并请求，要求合并到中心仓库master主干上。在合并回主干前，其他开发者有机会评审你的代码。";}i:2;i:2095;}i:45;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:4;i:1;s:4:"#ff0";}i:2;i:4;i:3;s:5:"</fc>";}i:2;i:2464;}i:46;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2469;}i:47;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2469;}i:48;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:1;i:1;s:7:"#0000EE";}i:2;i:1;i:3;s:12:"<fc #0000EE>";}i:2;i:2472;}i:49;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:393:" pull requests 的主要好处是便于实行代码评审, 但它最初的设计是代码讨论。你可以把pull requests 当作针对分支的讨论工具。你可以在开发阶段的早期就是用pull rquest，如果工程师需要对需求和开发更多的帮助，他就可以发起pull request，关注的人可以自动收到提示，大家能看到关于某次提交的相关讨论";}i:2;i:3;i:3;s:393:" pull requests 的主要好处是便于实行代码评审, 但它最初的设计是代码讨论。你可以把pull requests 当作针对分支的讨论工具。你可以在开发阶段的早期就是用pull rquest，如果工程师需要对需求和开发更多的帮助，他就可以发起pull request，关注的人可以自动收到提示，大家能看到关于某次提交的相关讨论";}i:2;i:2484;}i:50;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:4;i:1;s:4:"#ff0";}i:2;i:4;i:3;s:5:"</fc>";}i:2;i:2877;}i:51;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2882;}i:52;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2882;}i:53;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:1;i:1;s:7:"#0000EE";}i:2;i:1;i:3;s:12:"<fc #0000EE>";}i:2;i:2885;}i:54;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:274:" 一旦pull reques 被接受了，提交代码的功能和中央集中式工作流程一样。你首先从中心仓库更新本地主干分支，然后，你合并任务分支的变更到主干分支，接下来，向远端中心仓库主干分支提交合并后新变更。";}i:2;i:3;i:3;s:274:" 一旦pull reques 被接受了，提交代码的功能和中央集中式工作流程一样。你首先从中心仓库更新本地主干分支，然后，你合并任务分支的变更到主干分支，接下来，向远端中心仓库主干分支提交合并后新变更。";}i:2;i:2897;}i:55;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:4;i:1;s:4:"#ff0";}i:2;i:4;i:3;s:5:"</fc>";}i:2;i:3171;}i:56;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3176;}i:57;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3176;}i:58;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:1;i:1;s:7:"#0000EE";}i:2;i:1;i:3;s:12:"<fc #0000EE>";}i:2;i:3179;}i:59;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:70:" 对于一些git托管系统，pull request是非常有效的工具。";}i:2;i:3;i:3;s:70:" 对于一些git托管系统，pull request是非常有效的工具。";}i:2;i:3191;}i:60;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:4;i:1;s:4:"#ff0";}i:2;i:4;i:3;s:5:"</fc>";}i:2;i:3261;}i:61;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3266;}i:62;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3269;}i:63;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:12:"实例演示";i:1;i:2;i:2;i:3269;}i:2;i:3269;}i:64;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:3269;}i:65;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3269;}i:66;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:130:"在这个例子里，演示了如何用pull request作为代码评审的形式之一，但要明白pull request 有很多用途。";}i:2;i:3295;}i:67;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3425;}i:68;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3427;}i:69;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:26:"Mary 开始新任务开发";i:1;i:3;i:2;i:3427;}i:2;i:3427;}i:70;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:3427;}i:71;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3427;}i:72;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:51:":git_branch_model:git-workflow-feature-branch-2.png";i:1;s:0:"";i:2;s:6:"center";i:3;N;i:4;N;i:5;s:5:"cache";i:6;s:7:"details";}i:2;i:3462;}i:73;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3520;}i:74;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3520;}i:75;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:1;i:1;s:7:"#0000EE";}i:2;i:1;i:3;s:12:"<fc #0000EE>";}i:2;i:3523;}i:76;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:113:" 在Mary开始编码前，她需要一个隔离的分支，所以她开始本地创建一个新的任务分支：";}i:2;i:3;i:3;s:113:" 在Mary开始编码前，她需要一个隔离的分支，所以她开始本地创建一个新的任务分支：";}i:2;i:3535;}i:77;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:4;i:1;s:4:"#ff0";}i:2;i:4;i:3;s:5:"</fc>";}i:2;i:3648;}i:78;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3653;}i:79;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:38:"
git checkout -b marys-feature master
";i:1;N;i:2;N;}i:2;i:3660;}i:80;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3660;}i:81;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:1;i:1;s:7:"#0000EE";}i:2;i:1;i:3;s:12:"<fc #0000EE>";}i:2;i:3711;}i:82;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:263:" 新分支叫“marys-feature ”，从主干master分支分离出去，-b 参数告诉git如果分支不存在，就创建一个新分支。 在这个分支上，Mary编辑、缓存、提交代码。也许完成这个任务，需要在分支上提交很多次：";}i:2;i:3;i:3;s:263:" 新分支叫“marys-feature ”，从主干master分支分离出去，-b 参数告诉git如果分支不存在，就创建一个新分支。 在这个分支上，Mary编辑、缓存、提交代码。也许完成这个任务，需要在分支上提交很多次：";}i:2;i:3723;}i:83;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:4;i:1;s:4:"#ff0";}i:2;i:4;i:3;s:5:"</fc>";}i:2;i:3986;}i:84;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:0:"";}i:2;i:3991;}i:85;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3997;}i:86;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:43:"
git status
git add <some-file>
git commit
";i:1;N;i:2;N;}i:2;i:3997;}i:87;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:4049;}i:88;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:17:"Mary 要去午餐";i:1;i:3;i:2;i:4049;}i:2;i:4049;}i:89;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:4049;}i:90;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4049;}i:91;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:51:":git_branch_model:git-workflow-feature-branch-3.png";i:1;s:30:"Git Workflows: Feature Commits";i:2;s:6:"center";i:3;N;i:4;N;i:5;s:5:"cache";i:6;s:7:"details";}i:2;i:4076;}i:92;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4164;}i:93;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4164;}i:94;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:1;i:1;s:7:"#0000EE";}i:2;i:1;i:3;s:12:"<fc #0000EE>";}i:2;i:4168;}i:95;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:285:" Mary 清晨开始了一些提交，午餐时，她最好能把任务分支最新的变更同时提交到中央项目库。这也是一种很好的备份方式。如果，Mary 和其他开发者有协作要求，尽早提交到中央项目，让大家都能尽在看到Mary的提交。";}i:2;i:3;i:3;s:285:" Mary 清晨开始了一些提交，午餐时，她最好能把任务分支最新的变更同时提交到中央项目库。这也是一种很好的备份方式。如果，Mary 和其他开发者有协作要求，尽早提交到中央项目，让大家都能尽在看到Mary的提交。";}i:2;i:4180;}i:96;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:4;i:1;s:4:"#ff0";}i:2;i:4;i:3;s:5:"</fc>";}i:2;i:4465;}i:97;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:0:"";}i:2;i:4470;}i:98;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4476;}i:99;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:34:"
git push -u origin marys-feature
";i:1;N;i:2;N;}i:2;i:4476;}i:100;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4476;}i:101;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:227:"This command pushes marys-feature to the central repository (origin), and the -u flag adds it as a remote tracking branch. After setting up the tracking branch, Mary can call git push without any parameters to push her feature.";}i:2;i:4520;}i:102;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4747;}i:103;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4747;}i:104;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:1;i:1;s:7:"#0000EE";}i:2;i:1;i:3;s:12:"<fc #0000EE>";}i:2;i:4749;}i:105;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:136:" 这个命令在中心项目仓库origin创建新分支 marys-feature。Mary利用这里命令在中央仓库创建了自己的分支。";}i:2;i:3;i:3;s:136:" 这个命令在中心项目仓库origin创建新分支 marys-feature。Mary利用这里命令在中央仓库创建了自己的分支。";}i:2;i:4761;}i:106;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:4;i:1;s:4:"#ff0";}i:2;i:4;i:3;s:5:"</fc>";}i:2;i:4897;}i:107;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4902;}i:108;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:4904;}i:109;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:26:"Mary 的任务开发完成";i:1;i:3;i:2;i:4904;}i:2;i:4904;}i:110;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:4904;}i:111;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4904;}i:112;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:51:":git_branch_model:git-workflow-feature-branch-4.png";i:1;s:27:"Git Workflows: Pull Request";i:2;s:6:"center";i:3;N;i:4;N;i:5;s:5:"cache";i:6;s:7:"details";}i:2;i:4940;}i:113;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5025;}i:114;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5025;}i:115;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:1;i:1;s:7:"#0000EE";}i:2;i:1;i:3;s:12:"<fc #0000EE>";}i:2;i:5029;}i:116;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:200:" 当Mary 午餐后，她完成了开发。在合并回主干，她要发起一个pull request 让团队其他成员了解她干了什么。当然，首先，她要向中央仓库分支提交代码： ";}i:2;i:3;i:3;s:200:" 当Mary 午餐后，她完成了开发。在合并回主干，她要发起一个pull request 让团队其他成员了解她干了什么。当然，首先，她要向中央仓库分支提交代码： ";}i:2;i:5041;}i:117;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:4;i:1;s:4:"#ff0";}i:2;i:4;i:3;s:5:"</fc>";}i:2;i:5241;}i:118;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5246;}i:119;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:10:"
git push
";i:1;N;i:2;N;}i:2;i:5253;}i:120;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5253;}i:121;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:1;i:1;s:7:"#0000EE";}i:2;i:1;i:3;s:12:"<fc #0000EE>";}i:2;i:5275;}i:122;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:274:" 然后，在她的Git工具中，发起一个pull request,要求合并她的代码到主干，团队其他成员也会自动收到提示。 pull request 的特点之一就是可以在相关提交里写下评语。所以对于某个代码片段可以容易地发起评审。";}i:2;i:3;i:3;s:274:" 然后，在她的Git工具中，发起一个pull request,要求合并她的代码到主干，团队其他成员也会自动收到提示。 pull request 的特点之一就是可以在相关提交里写下评语。所以对于某个代码片段可以容易地发起评审。";}i:2;i:5287;}i:123;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:4;i:1;s:4:"#ff0";}i:2;i:4;i:3;s:5:"</fc>";}i:2;i:5561;}i:124;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5566;}i:125;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:5569;}i:126;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:26:"Bill 收到了合并请求";i:1;i:3;i:2;i:5569;}i:2;i:5569;}i:127;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:5569;}i:128;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5569;}i:129;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:51:":git_branch_model:git-workflow-feature-branch-5.png";i:1;s:37:"
Git Workflows: Feature Pull Requests";i:2;s:6:"center";i:3;N;i:4;N;i:5;s:5:"cache";i:6;s:7:"details";}i:2;i:5604;}i:130;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5699;}i:131;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5699;}i:132;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:1;i:1;s:7:"#0000EE";}i:2;i:1;i:3;s:12:"<fc #0000EE>";}i:2;i:5702;}i:133;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:192:" Bill收到合并请求pull request，看到了Marry的分支。在合并Marry的代码到官方项目库前，Bill还要做一些变更，所以通过pull request和Marry做了一些沟通。";}i:2;i:3;i:3;s:192:" Bill收到合并请求pull request，看到了Marry的分支。在合并Marry的代码到官方项目库前，Bill还要做一些变更，所以通过pull request和Marry做了一些沟通。";}i:2;i:5714;}i:134;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:4;i:1;s:4:"#ff0";}i:2;i:4;i:3;s:5:"</fc>";}i:2;i:5906;}i:135;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5911;}i:136;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:5913;}i:137;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:23:"Mary 继续修改代码";i:1;i:3;i:2;i:5913;}i:2;i:5913;}i:138;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:5913;}i:139;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5913;}i:140;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:51:":git_branch_model:git-workflow-feature-branch-6.png";i:1;s:38:"Git Workflows: Central Repository Push";i:2;s:6:"center";i:3;N;i:4;N;i:5;s:5:"cache";i:6;s:7:"details";}i:2;i:5946;}i:141;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6042;}i:142;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6042;}i:143;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:279:"To make the changes, Mary uses the exact same process as she did to create the first iteration of her feature. She edits, stages, commits, and pushes updates to the central repository. All her activity shows up in the pull request, and Bill can still make comments along the way.";}i:2;i:6044;}i:144;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6323;}i:145;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6323;}i:146;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:1;i:1;s:7:"#0000EE";}i:2;i:1;i:3;s:12:"<fc #0000EE>";}i:2;i:6325;}i:147;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:253:" Mary 就像第一轮过程，重复执行了编码，git add，git commit，git push 的工作。把代码提交到中央项目库分支。她的所有的变更历史都体现在pull request里，Bill 任然继续在pull request里执行代码评审。";}i:2;i:3;i:3;s:253:" Mary 就像第一轮过程，重复执行了编码，git add，git commit，git push 的工作。把代码提交到中央项目库分支。她的所有的变更历史都体现在pull request里，Bill 任然继续在pull request里执行代码评审。";}i:2;i:6337;}i:148;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:4;i:1;s:4:"#ff0";}i:2;i:4;i:3;s:5:"</fc>";}i:2;i:6590;}i:149;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6595;}i:150;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6595;}i:151;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:157:"If he wanted, Bill could pull marys-feature into his local repository and work on it on his own. Any commits he added would also show up in the pull request.";}i:2;i:6598;}i:152;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6755;}i:153;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6755;}i:154;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:1;i:1;s:7:"#0000EE";}i:2;i:1;i:3;s:12:"<fc #0000EE>";}i:2;i:6757;}i:155;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:169:" 如果有必要，Bill会 pull mary的代码分支进入他本地仓库，基于其上，继续工作。当让，任何Bill增加的提交都会想在pull request上。";}i:2;i:3;i:3;s:169:" 如果有必要，Bill会 pull mary的代码分支进入他本地仓库，基于其上，继续工作。当让，任何Bill增加的提交都会想在pull request上。";}i:2;i:6769;}i:156;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:4;i:1;s:4:"#ff0";}i:2;i:4;i:3;s:5:"</fc>";}i:2;i:6938;}i:157;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:0:"";}i:2;i:6943;}i:158;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6944;}i:159;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:6944;}i:160;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:34:"Mary合并代码到中央项目库";i:1;i:3;i:2;i:6944;}i:2;i:6944;}i:161;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:6944;}i:162;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6944;}i:163;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:51:":git_branch_model:git-workflow-feature-branch-7.png";i:1;s:0:"";i:2;s:6:"center";i:3;N;i:4;N;i:5;s:5:"cache";i:6;s:7:"details";}i:2;i:6987;}i:164;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7045;}i:165;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7045;}i:166;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:1;i:1;s:7:"#0000EE";}i:2;i:1;i:3;s:12:"<fc #0000EE>";}i:2;i:7048;}i:167;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:163:" 一旦Bill 决定接受pull request，就要有人去合并Mary的代码到稳定的中央项目仓库，（这个工作可以是Marry也可以是Bill来操作）";}i:2;i:3;i:3;s:163:" 一旦Bill 决定接受pull request，就要有人去合并Mary的代码到稳定的中央项目仓库，（这个工作可以是Marry也可以是Bill来操作）";}i:2;i:7060;}i:168;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:4;i:1;s:4:"#ff0";}i:2;i:4;i:3;s:5:"</fc>";}i:2;i:7223;}i:169;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7228;}i:170;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:69:"
git checkout master
git pull
git pull origin marys-feature
git push
";i:1;N;i:2;N;}i:2;i:7235;}i:171;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7235;}i:172;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:435:"First, whoever’s performing the merge needs to check out their master branch and make sure it’s up to date. Then, git pull origin marys-feature merges the central repository’s copy of marys-feature. You could also use a simple git merge marys-feature, but the command shown above makes sure you’re always pulling the most up-to-date version of the feature branch. Finally, the updated master needs to get pushed back to origin.";}i:2;i:7314;}i:173;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7749;}i:174;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7749;}i:175;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:1;i:1;s:7:"#800000";}i:2;i:1;i:3;s:12:"<fc #800000>";}i:2;i:7751;}i:176;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:262:"首先，无论谁执行合并，都要先切换到master分支上，并保证master分支和中央项目库master分支同步。接着，git 合并 中央项目库的marys-feature 分支，最后，提交合并后的本地master到中央项目的master分支。";}i:2;i:3;i:3;s:262:"首先，无论谁执行合并，都要先切换到master分支上，并保证master分支和中央项目库master分支同步。接着，git 合并 中央项目库的marys-feature 分支，最后，提交合并后的本地master到中央项目的master分支。";}i:2;i:7763;}i:177;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:4;i:1;s:4:"#ff0";}i:2;i:4;i:3;s:5:"</fc>";}i:2;i:8025;}i:178;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8030;}i:179;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8030;}i:180;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:327:"This process often results in a merge commit. Some developers like this because it’s like a symbolic joining of the feature with the rest of the code base. But, if you’re partial to a linear history, it’s possible to rebase the feature onto the tip of master before executing the merge, resulting in a fast-forward merge.";}i:2;i:8032;}i:181;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8359;}i:182;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8359;}i:183;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:1;i:1;s:7:"#008000";}i:2;i:1;i:3;s:12:"<fc #008000>";}i:2;i:8361;}i:184;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:361:"这个过程会产生一次合并提交。有些工程师喜欢这种方式，因为看到自己代码产生一次新的基线，还有些工程师不喜欢分叉的历史树，喜欢线性的日志，他们可以使用rebase 将变更合并进主干分支。应为rebase不会产生合并提交，这种合并是一种快进是合并（fast-forward merge）。";}i:2;i:3;i:3;s:361:"这个过程会产生一次合并提交。有些工程师喜欢这种方式，因为看到自己代码产生一次新的基线，还有些工程师不喜欢分叉的历史树，喜欢线性的日志，他们可以使用rebase 将变更合并进主干分支。应为rebase不会产生合并提交，这种合并是一种快进是合并（fast-forward merge）。";}i:2;i:8373;}i:185;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:4;i:1;s:4:"#ff0";}i:2;i:4;i:3;s:5:"</fc>";}i:2;i:8734;}i:186;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8739;}i:187;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8739;}i:188;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:353:"Some GUI’s will automate the pull request acceptance process by running all of these commands just by clicking an “Accept” button. If yours doesn’t, it should at least be able to automatically close the pull request when the feature branch gets merged into master
一些图形git自动执行接受合并请求，只要点击“Accept”按钮。";}i:2;i:8741;}i:189;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9095;}i:190;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:9095;}i:191;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:35:"John 也做着自己同样的步骤";i:1;i:3;i:2;i:9095;}i:2;i:9095;}i:192;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:9095;}i:193;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9095;}i:194;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:311:"While Mary and Bill are working on marys-feature and discussing it in her pull request, John is doing the exact same thing with his own feature branch. By isolating features into separate branches, everybody can work independently, yet it’s still trivial to share changes with other developers when necessary.";}i:2;i:9141;}i:195;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9452;}i:196;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9452;}i:197;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:1;i:1;s:7:"#800000";}i:2;i:1;i:3;s:12:"<fc #800000>";}i:2;i:9454;}i:198;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:247:"在Mary和Bill在分支marys-feature上修改和讨论时，John也在自己的任务分支上做着同样的步骤。不同的任务隔离在不同的分支上，每个人都能独立工作，必要的时候他也已让和其他人讨论变更。";}i:2;i:3;i:3;s:247:"在Mary和Bill在分支marys-feature上修改和讨论时，John也在自己的任务分支上做着同样的步骤。不同的任务隔离在不同的分支上，每个人都能独立工作，必要的时候他也已让和其他人讨论变更。";}i:2;i:9466;}i:199;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:4;i:1;s:4:"#ff0";}i:2;i:4;i:3;s:5:"</fc>";}i:2;i:9713;}i:200;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:0:"";}i:2;i:9718;}i:201;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9719;}i:202;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:9719;}i:203;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:21:"Where To Go From Here";i:1;i:2;i:2;i:9719;}i:2;i:9719;}i:204;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:9719;}i:205;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9719;}i:206;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:319:"By now, you can hopefully see how feature branches are a way to quite literally multiply the functionality of the single master branch used in the Centralized Workflow. In addition, feature branches also facilitate pull requests, which makes it possible to discuss specific commits right inside of your version control ";}i:2;i:9752;}i:207;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"GUI";}i:2;i:10071;}i:208;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:10074;}i:209;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10075;}i:210;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10075;}i:211;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:334:"The Feature Branch Workflow is an incredibly flexible way to develop a project. The problem is, sometimes it’s too flexible. For larger teams, it’s often beneficial to assign more specific roles to different branches. The Gitflow Workflow is a common pattern for managing feature development, release preparation, and maintenance.";}i:2;i:10077;}i:212;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10411;}i:213;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:10412;}i:214;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:10412;}}