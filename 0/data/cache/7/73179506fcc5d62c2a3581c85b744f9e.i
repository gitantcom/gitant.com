a:159:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:18:"特性分支模式";i:1;i:1;i:2;i:1;}i:2;i:1;}i:2;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:1;}i:3;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1;}i:4;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:196:"Once you've got the hang of the Centralized Workflow, adding feature branches to your development process is an easy way to encourage collaboration and streamline communication between developers.";}i:2;i:33;}i:5;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:229;}i:6;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:229;}i:7;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:135:"一旦熟悉了集中式的git开发流程，再使用特性分支开发就容易多了，并加强了协作性而且简便了沟通。";}i:2;i:231;}i:8;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:366;}i:9;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:366;}i:10;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:408:"The core idea behind the Feature Branch Workflow is that all feature development should take place in a dedicated branch instead of the master branch. This encapsulation makes it easy for multiple developers to work on a particular feature without disturbing the main codebase. It also means the master branch will never contain broken code, which is a huge advantage for continuous integration environments.";}i:2;i:368;}i:11;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:776;}i:12;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:776;}i:13;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:217:"特性分支流程的核心就是所有新需求都在分支上开发。大家都在不同的分支上开发，互相不干扰，主干（master)不会有无法编译的代码，持续集成就需要这种的特性。";}i:2;i:778;}i:14;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:995;}i:15;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:995;}i:16;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:484:"Encapsulating feature development also makes it possible to leverage pull requests, which are a way to initiate discussions around a branch. They give other developers the opportunity to sign off on a feature before it gets integrated into the official project. Or, if you get stuck in the middle of a feature, you can open a pull request asking for suggestions from your colleagues. The point is, pull requests make it incredibly easy for your team to comment on each other’s work.";}i:2;i:997;}i:17;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1481;}i:18;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1481;}i:19;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:60:"每个需求都有分支来开发，这就使得pull request";}i:2;i:1483;}i:20;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1543;}i:21;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1545;}i:22;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:12:"How It Works";i:1;i:2;i:2;i:1545;}i:2;i:1545;}i:23;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:1545;}i:24;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1545;}i:25;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:417:"The Feature Branch Workflow still uses a central repository, and master still represents the official project history. But, instead of committing directly on their local master branch, developers create a new branch every time they start work on a new feature. Feature branches should have descriptive names, like animated-menu-items or issue-#1061. The idea is to give a clear, highly-focused purpose to each branch.";}i:2;i:1569;}i:26;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1986;}i:27;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1986;}i:28;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:198:"Git makes no technical distinction between the master branch and feature branches, so developers can edit, stage, and commit changes to a feature branch just as they did in the Centralized Workflow.";}i:2;i:1988;}i:29;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2186;}i:30;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2186;}i:31;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:399:"In addition, feature branches can (and should) be pushed to the central repository. This makes it possible to share a feature with other developers without touching any official code. Since master is the only “special” branch, storing several feature branches on the central repository doesn’t pose any problems. Of course, this is also a convenient way to back up everybody’s local commits.";}i:2;i:2188;}i:32;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2587;}i:33;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2589;}i:34;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:13:"Pull Requests";i:1;i:3;i:2;i:2589;}i:2;i:2589;}i:35;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:2589;}i:36;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2589;}i:37;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:428:"Aside from isolating feature development, branches make it possible to discuss changes via pull requests. Once someone completes a feature, they don’t immediately merge it into master. Instead, they push the feature branch to the central server and file a pull request asking to merge their additions into master. This gives other developers an opportunity to review the changes before they become a part of the main codebase.";}i:2;i:2612;}i:38;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3040;}i:39;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3040;}i:40;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:519:"Code review is a major benefit of pull requests, but they’re actually designed to be a generic way to talk about code. You can think of pull requests as a discussion dedicated to a particular branch. This means that they can also be used much earlier in the development process. For example, if a developer needs help with a particular feature, all they have to do is file a pull request. Interested parties will be notified automatically, and they’ll be able to see the question right next to the relevant commits.";}i:2;i:3042;}i:41;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3561;}i:42;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3561;}i:43;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:316:"Once a pull request is accepted, the actual act of publishing a feature is much the same as in the Centralized Workflow. First, you need to make sure your local master is synchronized with the upstream master. Then, you merge the feature branch into master and push the updated master back to the central repository.";}i:2;i:3563;}i:44;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3879;}i:45;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3879;}i:46;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:159:"Pull requests can be facilitated by product repository management solutions like Bitbucket or Stash. View the Stash pull requests documentation for an example.";}i:2;i:3881;}i:47;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4040;}i:48;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:4042;}i:49;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:7:"Example";i:1;i:2;i:2;i:4042;}i:2;i:4042;}i:50;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:4042;}i:51;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4042;}i:52;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:134:"The example included below demonstrates a pull request as a form of code review, but remember that they can serve many other purposes.";}i:2;i:4061;}i:53;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4195;}i:54;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:4197;}i:55;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:25:"Mary begins a new feature";i:1;i:3;i:2;i:4197;}i:2;i:4197;}i:56;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:4197;}i:57;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4197;}i:58;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:138:"Before she starts developing a feature, Mary needs an isolated branch to work on. She can request a new branch with the following command:";}i:2;i:4232;}i:59;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4370;}i:60;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4370;}i:61;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:36:"git checkout -b marys-feature master";}i:2;i:4372;}i:62;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4408;}i:63;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4408;}i:64;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:277:"This checks out a branch called marys-feature based on master, and the -b flag tells Git to create the branch if it doesn’t already exist. On this branch, Mary edits, stages, and commits changes in the usual fashion, building up her feature with as many commits as necessary:";}i:2;i:4410;}i:65;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4687;}i:66;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4687;}i:67;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:41:"git status
git add <some-file>
git commit";}i:2;i:4689;}i:68;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4730;}i:69;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:4732;}i:70;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:18:"Mary goes to lunch";i:1;i:3;i:2;i:4732;}i:2;i:4732;}i:71;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:4732;}i:72;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4732;}i:73;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:30:"Git Workflows: Feature Commits";}i:2;i:4760;}i:74;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4790;}i:75;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4790;}i:76;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:321:"Mary adds a few commits to her feature over the course of the morning. Before she leaves for lunch, it’s a good idea to push her feature branch up to the central repository. This serves as a convenient backup, but if Mary was collaborating with other developers, this would also give them access to her initial commits.";}i:2;i:4792;}i:77;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5113;}i:78;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5113;}i:79;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:32:"git push -u origin marys-feature";}i:2;i:5115;}i:80;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5147;}i:81;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5147;}i:82;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:227:"This command pushes marys-feature to the central repository (origin), and the -u flag adds it as a remote tracking branch. After setting up the tracking branch, Mary can call git push without any parameters to push her feature.";}i:2;i:5149;}i:83;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5376;}i:84;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:5378;}i:85;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:25:"Mary finishes her feature";i:1;i:3;i:2;i:5378;}i:2;i:5378;}i:86;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:5378;}i:87;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5378;}i:88;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:27:"Git Workflows: Pull Request";}i:2;i:5413;}i:89;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5440;}i:90;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5440;}i:91;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:252:"When Mary gets back from lunch, she completes her feature. Before merging it into master, she needs to file a pull request letting the rest of the team know she's done. But first, she should make sure the central repository has her most recent commits:";}i:2;i:5442;}i:92;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5694;}i:93;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5694;}i:94;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"git push";}i:2;i:5696;}i:95;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5704;}i:96;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5704;}i:97;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:44:"Then, she files the pull request in her Git ";}i:2;i:5706;}i:98;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"GUI";}i:2;i:5750;}i:99;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:249:" asking to merge marys-feature into master, and team members will be notified automatically. The great thing about pull requests is that they show comments right next to their related commits, so it's easy to ask questions about specific changesets.";}i:2;i:5753;}i:100;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6002;}i:101;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:6004;}i:102;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:30:"Bill receives the pull request";i:1;i:3;i:2;i:6004;}i:2;i:6004;}i:103;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:6004;}i:104;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6004;}i:105;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:36:"Git Workflows: Feature Pull Requests";}i:2;i:6044;}i:106;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6080;}i:107;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6080;}i:108;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:215:"Bill gets the pull request and takes a look at marys-feature. He decides he wants to make a few changes before integrating it into the official project, and he and Mary have some back-and-forth via the pull request.";}i:2;i:6082;}i:109;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6297;}i:110;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:6299;}i:111;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:22:"Mary makes the changes";i:1;i:3;i:2;i:6299;}i:2;i:6299;}i:112;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:6299;}i:113;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6299;}i:114;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:38:"Git Workflows: Central Repository Push";}i:2;i:6331;}i:115;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6369;}i:116;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6369;}i:117;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:279:"To make the changes, Mary uses the exact same process as she did to create the first iteration of her feature. She edits, stages, commits, and pushes updates to the central repository. All her activity shows up in the pull request, and Bill can still make comments along the way.";}i:2;i:6371;}i:118;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6650;}i:119;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6650;}i:120;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:157:"If he wanted, Bill could pull marys-feature into his local repository and work on it on his own. Any commits he added would also show up in the pull request.";}i:2;i:6652;}i:121;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6810;}i:122;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:6810;}i:123;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:26:"Mary publishes her feature";i:1;i:3;i:2;i:6810;}i:2;i:6810;}i:124;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:6810;}i:125;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6810;}i:126;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:148:"Once Bill is ready to accept the pull request, someone needs to merge the feature into the stable project (this can be done by either Bill or Mary):";}i:2;i:6846;}i:127;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6994;}i:128;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6994;}i:129;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:67:"git checkout master
git pull
git pull origin marys-feature
git push";}i:2;i:6996;}i:130;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7063;}i:131;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7063;}i:132;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:435:"First, whoever’s performing the merge needs to check out their master branch and make sure it’s up to date. Then, git pull origin marys-feature merges the central repository’s copy of marys-feature. You could also use a simple git merge marys-feature, but the command shown above makes sure you’re always pulling the most up-to-date version of the feature branch. Finally, the updated master needs to get pushed back to origin.";}i:2;i:7065;}i:133;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7500;}i:134;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7500;}i:135;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:327:"This process often results in a merge commit. Some developers like this because it’s like a symbolic joining of the feature with the rest of the code base. But, if you’re partial to a linear history, it’s possible to rebase the feature onto the tip of master before executing the merge, resulting in a fast-forward merge.";}i:2;i:7502;}i:136;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7829;}i:137;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7829;}i:138;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:271:"Some GUI’s will automate the pull request acceptance process by running all of these commands just by clicking an “Accept” button. If yours doesn’t, it should at least be able to automatically close the pull request when the feature branch gets merged into master";}i:2;i:7831;}i:139;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8103;}i:140;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:8103;}i:141;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:45:"Meanwhile, John is doing the exact same thing";i:1;i:3;i:2;i:8103;}i:2;i:8103;}i:142;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:8103;}i:143;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8103;}i:144;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:311:"While Mary and Bill are working on marys-feature and discussing it in her pull request, John is doing the exact same thing with his own feature branch. By isolating features into separate branches, everybody can work independently, yet it’s still trivial to share changes with other developers when necessary.";}i:2;i:8158;}i:145;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8470;}i:146;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:8470;}i:147;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:21:"Where To Go From Here";i:1;i:2;i:2;i:8470;}i:2;i:8470;}i:148;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:8470;}i:149;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8470;}i:150;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:319:"By now, you can hopefully see how feature branches are a way to quite literally multiply the functionality of the single master branch used in the Centralized Workflow. In addition, feature branches also facilitate pull requests, which makes it possible to discuss specific commits right inside of your version control ";}i:2;i:8503;}i:151;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"GUI";}i:2;i:8822;}i:152;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:8825;}i:153;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8826;}i:154;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8826;}i:155;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:334:"The Feature Branch Workflow is an incredibly flexible way to develop a project. The problem is, sometimes it’s too flexible. For larger teams, it’s often beneficial to assign more specific roles to different branches. The Gitflow Workflow is a common pattern for managing feature development, release preparation, and maintenance.";}i:2;i:8828;}i:156;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9162;}i:157;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:9163;}i:158;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:9163;}}