
<h1 class="sectionedit1" id="forking_workflow">Forking Workflow</h1>
<div class="level1">

<p>
The Forking Workflow is fundamentally different than the other workflows discussed in this tutorial. Instead of using a single server-side repository to act as the “central” codebase, it gives every developer a server-side repository. This means that each contributor has not one, but two Git repositories: a private local one and a public server-side one.
</p>

<p>
<a href="/0/lib/exe/detail.php?id=git_branch_model%3Agit-fork-branch&amp;media=git_branch_model:git-workflows-forking.png" class="media" title="git_branch_model:git-workflows-forking.png"><img src="/0/lib/exe/fetch.php?media=git_branch_model:git-workflows-forking.png" class="mediacenter" title=" Git Workflows: Forking" alt=" Git Workflows: Forking" /></a>
</p>

<p>
The main advantage of the Forking Workflow is that contributions can be integrated without the need for everybody to push to a single central repository. Developers push to their own server-side repositories, and only the project maintainer can push to the official repository. This allows the maintainer to accept commits from any developer without giving them write access to the official codebase.
</p>

<p>
The result is a distributed workflow that provides a flexible way for large, organic teams (including untrusted third-parties) to collaborate securely. This also makes it an ideal workflow for open source projects.
</p>

</div>
<!-- EDIT1 SECTION "Forking Workflow" [1-1085] -->
<h2 class="sectionedit2" id="how_it_works">How It Works</h2>
<div class="level2">

<p>
As in the other Git workflows, the Forking Workflow begins with an official public repository stored on a server. But when a new developer wants to start working on the project, they do not directly clone the official repository.
</p>

<p>
开始项目时，并不直接克隆仓库。
</p>

<p>
Instead, they fork the official repository to create copy of it on the server. This new copy serves as their personal public repository—no other developers are allowed to push to it, but they can pull changes from it (we’ll see why this is important in a moment). After they have created their server-side copy, the developer performs a git clone to get a copy of it onto their local machine. This serves as their private development environment, just like in the other workflows.
</p>

<p>
相反，工程师复刻官方仓库。新拷贝作为工程师个人的公开仓库，但是其他人不能提交。
</p>

<p>
When they&#039;re ready to publish a local commit, they push the the commit to their own public repository—not the official one. Then, they file a pull request with the main repository, which lets the project maintainer know that an update is ready to be integrated. The pull request also serves as a convenient discussion thread if there are issues with the contributed code.
</p>

<p>
To integrate the feature into the official codebase, the maintainer pulls the contributor’s changes into their local repository, checks to make sure it doesn’t break the project, merges it into his local master branch, then pushes the master branch to the official repository on the server. The contribution is now part of the project, and other developers should pull from the official repository to synchronize their local repositories.
</p>

</div>
<!-- EDIT2 SECTION "How It Works" [1086-2812] -->
<h3 class="sectionedit3" id="the_official_repository">The Official Repository</h3>
<div class="level3">

<p>
It’s important to understand that the notion of an “official” repository in the Forking Workflow is merely a convention. From a technical standpoint, Git doesn’t see any difference between each developer’s public repository and the official one. In fact, the only thing that makes the official repository so official is that it’s the public repository of the project maintainer.
</p>

</div>
<!-- EDIT3 SECTION "The Official Repository" [2813-3237] -->
<h3 class="sectionedit4" id="branching_in_the_forking_workflow">Branching in the Forking Workflow</h3>
<div class="level3">

<p>
All of these personal public repositories are really just a convenient way to share branches with other developers. Everybody should still be using branches to isolate individual features, just like in the Feature Branch Workflow and the Gitflow Workflow. The only difference is how those branches get shared. In the Forking Workflow, they are pulled into another developer’s local repository, while in the Feature Branch and Gitflow Workflows they are pushed to the official repository.
</p>

</div>
<!-- EDIT4 SECTION "Branching in the Forking Workflow" [3238-3772] -->
<h2 class="sectionedit5" id="example">Example</h2>
<div class="level2">

</div>
<!-- EDIT5 SECTION "Example" [3773-3791] -->
<h3 class="sectionedit6" id="the_project_maintainer_initializes_the_official_repository">The project maintainer initializes the official repository</h3>
<div class="level3">

<p>
<a href="/0/lib/exe/detail.php?id=git_branch_model%3Agit-fork-branch&amp;media=git_branch_model:git-workflows-forking-1.png" class="media" title="git_branch_model:git-workflows-forking-1.png"><img src="/0/lib/exe/fetch.php?media=git_branch_model:git-workflows-forking-1.png" class="mediacenter" title="Forking Workflow: Shared Repository" alt="Forking Workflow: Shared Repository" /></a>
</p>

<p>
As with any Git-based project, the first step is to create an official repository on a server accessible to all of the team members. Typically, this repository will also serve as the public repository of the project maintainer.
</p>

<p>
Public repositories should always be bare, regardless of whether they represent the official codebase or not. So, the project maintainer should run something like the following to set up the official repository:
</p>

<p>
ssh user@host
git init –bare /path/to/repo.git
</p>

<p>
Bitbucket and Stash also provide a convenient <abbr title="Graphical User Interface">GUI</abbr> alternative to the above commands. This is the exact same process as setting up a central repository for the other workflows in this tutorial. The maintainer should also push the existing codebase to this repository, if necessary.
Developers fork the official repository
</p>

<p>
<a href="/0/lib/exe/detail.php?id=git_branch_model%3Agit-fork-branch&amp;media=git_branch_model:git-workflows-forking-2.png" class="media" title="git_branch_model:git-workflows-forking-2.png"><img src="/0/lib/exe/fetch.php?media=git_branch_model:git-workflows-forking-2.png" class="mediacenter" title="Forking Workflow: Forking the official repository." alt="Forking Workflow: Forking the official repository." /></a>
</p>

<p>
Next, all of the other developers need to fork this official repository. It’s possible to do this by SSH’ing into the server and running git clone to copy it to another location on the server—yes, forking is basically just a server-side clone. But again, Bitbucket and Stash let developers fork a repository with the click of a button.
</p>

<p>
After this step, every developer should have their own server-side repository. Like the official repository, all of these should be bare repositories.
</p>

</div>
<!-- EDIT6 SECTION "The project maintainer initializes the official repository" [3792-5360] -->
<h3 class="sectionedit7" id="developers_clone_their_forked_repositories">Developers clone their forked repositories</h3>
<div class="level3">

<p>
<a href="/0/lib/exe/detail.php?id=git_branch_model%3Agit-fork-branch&amp;media=git_branch_model:git-workflows-forking-3.png" class="media" title="git_branch_model:git-workflows-forking-3.png"><img src="/0/lib/exe/fetch.php?media=git_branch_model:git-workflows-forking-3.png" class="mediacenter" title="Forking Workflow: Cloning the forked repositories" alt="Forking Workflow: Cloning the forked repositories" /></a>
</p>

<p>
Next each developer needs to clone their own public repository. They can do with the familiar git clone command.
</p>

<p>
Our example assumes the use of Bitbucket to host these repositories. Remember, in this situation, each developer should have their own Bitbucket account and they should clone their server-side repository using:
</p>

<p>
git clone <a href="https://user@bitbucket.org/user/repo.git" class="urlextern" title="https://user@bitbucket.org/user/repo.git"  rel="nofollow">https://user@bitbucket.org/user/repo.git</a>
</p>

<p>
Whereas the other workflows in this tutorial use a single origin remote that points to the central repository, the Forking Workflow requires two remotes—one for the official repository, and one for the developer’s personal server-side repository. While you can call these remotes anything you want, a common convention is to use origin as the remote for your forked repository (this will be created automatically when you run git clone) and upstream for the official repository.
</p>

<p>
git remote add upstream <a href="https://bitbucket.org/maintainer/repo" class="urlextern" title="https://bitbucket.org/maintainer/repo"  rel="nofollow">https://bitbucket.org/maintainer/repo</a>
</p>

<p>
You’ll need to create the upstream remote yourself using the above command. This will let you easily keep your local repository up-to-date as the official project progresses. Note that if your upstream repository has authentication enabled (i.e., it&#039;s not open source), you&#039;ll need to supply a username, like so:
</p>

<p>
git remote add upstream <a href="https://user@bitbucket.org/maintainer/repo.git" class="urlextern" title="https://user@bitbucket.org/maintainer/repo.git"  rel="nofollow">https://user@bitbucket.org/maintainer/repo.git</a>
</p>

<p>
This requires users to supply a valid password before cloning or pulling from the official codebase.
</p>

</div>
<!-- EDIT7 SECTION "Developers clone their forked repositories" [5361-6930] -->
<h3 class="sectionedit8" id="developers_work_on_their_features">Developers work on their features</h3>
<div class="level3">

<p>
<a href="/0/lib/exe/detail.php?id=git_branch_model%3Agit-fork-branch&amp;media=git_branch_model:git-workflows-forking-4.png" class="media" title="git_branch_model:git-workflows-forking-4.png"><img src="/0/lib/exe/fetch.php?media=git_branch_model:git-workflows-forking-4.png" class="mediacenter" title="Forking Workflow: Developers work on features" alt="Forking Workflow: Developers work on features" /></a>
</p>

<p>
In the local repositories that they just cloned, developers can edit code, commit changes, and create branches just like they did in the other workflows:
</p>

<p>
git checkout -b some-feature
# Edit some code
git commit -a -m “Add first draft of some feature”
</p>

<p>
All of their changes will be entirely private until they push it to their public repository. And, if the official project has moved forward, they can access new commits with git pull:
</p>

<p>
git pull upstream master
</p>

<p>
Since developers should be working in a dedicated feature branch, this should generally result in a fast-forward merge.
</p>

</div>
<!-- EDIT8 SECTION "Developers work on their features" [6931-7657] -->
<h3 class="sectionedit9" id="developers_publish_their_features">Developers publish their features</h3>
<div class="level3">

<p>
<a href="/0/lib/exe/detail.php?id=git_branch_model%3Agit-fork-branch&amp;media=git_branch_model:git-workflows-forking-5.png" class="media" title="git_branch_model:git-workflows-forking-5.png"><img src="/0/lib/exe/fetch.php?media=git_branch_model:git-workflows-forking-5.png" class="mediacenter" title="Forking Workflow: Developers publish features" alt="Forking Workflow: Developers publish features" /></a>
</p>

<p>
Once a developer is ready to share their new feature, they need to do two things. First, they have to make their contribution accessible to other developers by pushing it to their public repository. Their origin remote should already be set up, so all they should have to do is the following:
</p>

<p>
git push origin feature-branch
</p>

<p>
This diverges from the other workflows in that the origin remote points to the developer’s personal server-side repository, not the main codebase.
</p>

<p>
Second, they need to notify the project maintainer that they want to merge their feature into the official codebase. Bitbucket and Stash provide a “Pull request” button that leads to a form asking you to specify which branch you want to merge into the official repository. Typically, you’ll want to integrate your feature branch into the upstream remote’s master branch.
</p>

</div>
<!-- EDIT9 SECTION "Developers publish their features" [7658-8655] -->
<h3 class="sectionedit10" id="the_project_maintainer_integrates_their_features">The project maintainer integrates their features</h3>
<div class="level3">

<p>
<a href="/0/lib/exe/detail.php?id=git_branch_model%3Agit-fork-branch&amp;media=git_branch_model:git-workflows-forking-6.png" class="media" title="git_branch_model:git-workflows-forking-6.png"><img src="/0/lib/exe/fetch.php?media=git_branch_model:git-workflows-forking-6.png" class="mediacenter" title="
Forking Workflow: Integrate Features" alt="
Forking Workflow: Integrate Features" /></a>
</p>

<p>
When the project maintainer receives the pull request, their job is to decide whether or not to integrate it into the official codebase. They can do this in one of two ways:
</p>

<p>
1) Inspect the code directly in the pull request
</p>

<p>
2) Pull the code into their local repository and manually merge it
</p>

<p>
The first option is simpler, as it lets the maintainer view a diff of the changes, comment on it, and perform the merge via a graphical user interface. However, the second option is necessary if the pull request results in a merge conflict. In this case, the maintainer needs to fetch the feature branch from the developer’s server-side repository, merge it into their local master branch, and resolve any conflicts:
</p>

<p>
git fetch <a href="https://bitbucket.org/user/repo" class="urlextern" title="https://bitbucket.org/user/repo"  rel="nofollow">https://bitbucket.org/user/repo</a> feature-branch
# Inspect the changes
git checkout master
git merge FETCH_HEAD
</p>

<p>
Once the changes are integrated into their local master, the maintainer needs to push it to the official repository on the server so that other developers can access it:
</p>

<p>
git push origin master
</p>

<p>
Remember that the maintainer&#039;s origin points to their public repository, which also serves as the official codebase for the project. The developer&#039;s contribution is now fully integrated into the project.
</p>

</div>
<!-- EDIT10 SECTION "The project maintainer integrates their features" [8656-10038] -->
<h3 class="sectionedit11" id="developers_synchronize_with_the_official_repository">Developers synchronize with the official repository</h3>
<div class="level3">

<p>
<a href="/0/lib/exe/detail.php?id=git_branch_model%3Agit-fork-branch&amp;media=git_branch_model:git-workflows-forking-7.png" class="media" title="git_branch_model:git-workflows-forking-7.png"><img src="/0/lib/exe/fetch.php?media=git_branch_model:git-workflows-forking-7.png" class="mediacenter" title="Forking Workflow: Synchronize with the official repository
" alt="Forking Workflow: Synchronize with the official repository
" /></a>
Since the main codebase has moved forward, other developers should synchronize with the official repository:
</p>

<p>
git pull upstream master
</p>

</div>
<!-- EDIT11 SECTION "Developers synchronize with the official repository" [10039-10347] -->
<h2 class="sectionedit12" id="where_to_go_from_here">Where To Go From Here</h2>
<div class="level2">

<p>
If you’re coming from an SVN background, the Forking Workflow may seem like a radical paradigm shift. But don’t be afraid—all it’s really doing is introducing another level of abstraction on top of the Feature Branch Workflow. Instead of sharing branches directly though a single central repository, contributions are published to a server-side repository dedicated to the originating developer.
</p>

<p>
This article explained how to a contribution flows from one developer into the official master branch, but the same methodology can be used to integrate a contribution into any repository. For example, if one part of your team is collaborating on a particular feature, they can share changes amongst themselves in the exact same manner—without touching the main repository.
</p>

<p>
This makes the Forking Workflow a very powerful tool for loosely-knit teams. Any developer can easily share changes with any other developer, and any branch can be efficiently merged into the official codebase.
</p>

</div>
<!-- EDIT12 SECTION "Where To Go From Here" [10348-] -->