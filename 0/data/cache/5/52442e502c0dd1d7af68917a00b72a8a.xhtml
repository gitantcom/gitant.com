
<h1 class="sectionedit1" id="gitflow_workflow">Gitflow Workflow</h1>
<div class="level1">

<p>
<a href="/0/lib/exe/detail.php?id=git_branch_modle%3Agit-workflow-gitflow&amp;media=git_branch_model:git-workflow-gitflow.png" class="media" title="git_branch_model:git-workflow-gitflow.png"><img src="/0/lib/exe/fetch.php?media=git_branch_model:git-workflow-gitflow.png" class="mediacenter" alt="" /></a>
The Gitflow Workflow section below is derived from Vincent Driessen at nvie. 
</p>

<p>
The Gitflow Workflow defines a strict branching model designed around the project release. While somewhat more complicated than the Feature Branch Workflow, this provides a robust framework for managing larger projects.
</p>

<p>
This workflow doesn’t add any new concepts or commands beyond what’s required for the Feature Branch Workflow. Instead, it assigns very specific roles to different branches and defines how and when they should interact. In addition to feature branches, it uses individual branches for preparing, maintaining, and recording releases. Of course, you also get to leverage all the benefits of the Feature Branch Workflow: pull requests, isolated experiments, and more efficient collaboration.
</p>

</div>
<!-- EDIT1 SECTION "Gitflow Workflow" [1-873] -->
<h2 class="sectionedit2" id="how_it_works">How It Works</h2>
<div class="level2">

<p>
The Gitflow Workflow still uses a central repository as the communication hub for all developers. And, as in the other workflows, developers work locally and push branches to the central repo. The only difference is the branch structure of the project.
</p>

</div>
<!-- EDIT2 SECTION "How It Works" [874-1151] -->
<h3 class="sectionedit3" id="historical_branches">Historical Branches</h3>
<div class="level3">

<p>
Instead of a single master branch, this workflow uses two branches to record the history of the project. The master branch stores the official release history, and the develop branch serves as an integration branch for features. It&#039;s also convenient to tag all commits in the master branch with a version number.
<a href="/0/lib/exe/detail.php?id=git_branch_modle%3Agit-workflow-gitflow&amp;media=git_branch_model:git-workflow-release-cycle-1historical.png" class="media" title="git_branch_model:git-workflow-release-cycle-1historical.png"><img src="/0/lib/exe/fetch.php?media=git_branch_model:git-workflow-release-cycle-1historical.png" class="mediacenter" alt="" /></a>
The rest of this workflow revolves around the distinction between these two branches.
</p>

</div>
<!-- EDIT3 SECTION "Historical Branches" [1152-1648] -->
<h3 class="sectionedit4" id="feature_branches">Feature Branches</h3>
<div class="level3">

<p>
Each new feature should reside in its own branch, which can be pushed to the central repository for backup/collaboration. But, instead of branching off of master, feature branches use develop as their parent branch. When a feature is complete, it gets merged back into develop. Features should never interact directly with master.
<a href="/0/lib/exe/detail.php?id=git_branch_modle%3Agit-workflow-gitflow&amp;media=git_branch_model:git-workflow-release-cycle-2feature.png" class="media" title="git_branch_model:git-workflow-release-cycle-2feature.png"><img src="/0/lib/exe/fetch.php?media=git_branch_model:git-workflow-release-cycle-2feature.png" class="mediacenter" alt="" /></a>
Note that feature branches combined with the develop branch is, for all intents and purposes, the Feature Branch Workflow. But, the Gitflow Workflow doesn’t stop there.
</p>

</div>
<!-- EDIT4 SECTION "Feature Branches" [1649-2242] -->
<h3 class="sectionedit5" id="release_branches">Release Branches</h3>
<div class="level3">

<p>
<a href="/0/lib/exe/detail.php?id=git_branch_modle%3Agit-workflow-gitflow&amp;media=git_branch_model:git-workflow-release-cycle-3release.png" class="media" title="git_branch_model:git-workflow-release-cycle-3release.png"><img src="/0/lib/exe/fetch.php?media=git_branch_model:git-workflow-release-cycle-3release.png" class="mediacenter" alt="" /></a>
Once develop has acquired enough features for a release (or a predetermined release date is approaching), you fork a release branch off of develop. Creating this branch starts the next release cycle, so no new features can be added after this point—only bug fixes, documentation generation, and other release-oriented tasks should go in this branch. Once it&#039;s ready to ship, the release gets merged into master and tagged with a version number. In addition, it should be merged back into develop, which may have progressed since the release was initiated.
</p>

<p>
Using a dedicated branch to prepare releases makes it possible for one team to polish the current release while another team continues working on features for the next release. It also creates well-defined phases of development (e.g., it&#039;s easy to say, “this week we&#039;re preparing for version 4.0” and to actually see it in the structure of the repository).
</p>

<p>
Common conventions:
</p>
<pre class="code">  branch off: develop
  merge into: master
  naming convention: release-* or release/*</pre>

</div>
<!-- EDIT5 SECTION "Release Branches" [2243-3370] -->
<h3 class="sectionedit6" id="maintenance_branches">Maintenance Branches</h3>
<div class="level3">

<p>
<a href="/0/lib/exe/detail.php?id=git_branch_modle%3Agit-workflow-gitflow&amp;media=git_branch_model:git-workflow-release-cycle-4maintenance.png" class="media" title="git_branch_model:git-workflow-release-cycle-4maintenance.png"><img src="/0/lib/exe/fetch.php?media=git_branch_model:git-workflow-release-cycle-4maintenance.png" class="mediacenter" alt="" /></a>
Maintenance or “hotfix” branches are used to quickly patch production releases. This is the only branch that should fork directly off of master. As soon as the fix is complete, it should be merged into both master and develop (or the current release branch), and master should be tagged with an updated version number.
</p>

<p>
Having a dedicated line of development for bug fixes lets your team address issues without interrupting the rest of the workflow or waiting for the next release cycle. You can think of maintenance branches as ad hoc release branches that work directly with master.
</p>

</div>
<!-- EDIT6 SECTION "Maintenance Branches" [3371-4059] -->
<h2 class="sectionedit7" id="example">Example</h2>
<div class="level2">

<p>
The example below demonstrates how this workflow can be used to manage a single release cycle. We’ll assume you have already created a central repository.
</p>

</div>
<!-- EDIT7 SECTION "Example" [4060-4237] -->
<h3 class="sectionedit8" id="create_a_develop_branch">Create a develop branch</h3>
<div class="level3">

<p>
<a href="/0/lib/exe/detail.php?id=git_branch_modle%3Agit-workflow-gitflow&amp;media=git_branch_model:git-workflow-release-cycle-5createdev.png" class="media" title="git_branch_model:git-workflow-release-cycle-5createdev.png"><img src="/0/lib/exe/fetch.php?media=git_branch_model:git-workflow-release-cycle-5createdev.png" class="mediacenter" alt="" /></a>
The first step is to complement the default master with a develop branch. A simple way to do this is for one developer to create an empty develop branch locally and push it to the server:  
</p>
<pre class="code">git branch develop
git push -u origin develop</pre>

<p>
This branch will contain the complete history of the project, whereas master will contain an abridged version. Other developers should now clone the central repository and create a tracking branch for develop:
</p>
<pre class="code">git clone ssh://user@host/path/to/repo.git
git checkout -b develop origin/develop</pre>

<p>
Everybody now has a local copy of the historical branches set up.   
</p>

</div>
<!-- EDIT8 SECTION "Create a develop branch" [4238-4970] -->
<h3 class="sectionedit9" id="mary_and_john_begin_new_features">Mary and John begin new features</h3>
<div class="level3">

<p>
 <a href="/0/lib/exe/detail.php?id=git_branch_modle%3Agit-workflow-gitflow&amp;media=git_branch_model:git-workflow-release-cycle-6maryjohnbeginnew.png" class="media" title="git_branch_model:git-workflow-release-cycle-6maryjohnbeginnew.png"><img src="/0/lib/exe/fetch.php?media=git_branch_model:git-workflow-release-cycle-6maryjohnbeginnew.png" class="mediacenter" alt="" /></a>
Our example starts with John and Mary working on separate features. They both need to create separate branches for their respective features. Instead of basing it on master, they should both base their feature branches on develop:
</p>
<pre class="code">git checkout -b some-feature develop</pre>

<p>
Both of them add commits to the feature branch in the usual fashion: edit, stage, commit:
</p>
<pre class="code">git status
git add &lt;some-file&gt;
git commit</pre>

</div>
<!-- EDIT9 SECTION "Mary and John begin new features" [4971-5518] -->
<h3 class="sectionedit10" id="mary_finishes_her_feature">Mary finishes her feature</h3>
<div class="level3">

<p>
<a href="/0/lib/exe/detail.php?id=git_branch_modle%3Agit-workflow-gitflow&amp;media=git_branch_model:git-workflow-release-cycle-7maryfinishes.png" class="media" title="git_branch_model:git-workflow-release-cycle-7maryfinishes.png"><img src="/0/lib/exe/fetch.php?media=git_branch_model:git-workflow-release-cycle-7maryfinishes.png" class="mediacenter" alt="" /></a>
After adding a few commits, Mary decides her feature is ready. If her team is using pull requests, this would be an appropriate time to open one asking to merge her feature into develop. Otherwise, she can merge it into her local develop and push it to the central repository, like so:
</p>
<pre class="code">git pull origin develop
git checkout develop
git merge some-feature
git push
git branch -d some-feature</pre>

<p>
The first command makes sure the develop branch is up to date before trying to merge in the feature. Note that features should never be merged directly into master. Conflicts can be resolved in the same way as in the Centralized Workflow.
</p>

</div>
<!-- EDIT10 SECTION "Mary finishes her feature" [5519-6268] -->
<h3 class="sectionedit11" id="mary_begins_to_prepare_a_release">Mary begins to prepare a release</h3>
<div class="level3">

<p>
<a href="/0/lib/exe/detail.php?id=git_branch_modle%3Agit-workflow-gitflow&amp;media=git_branch_model:git-workflow-release-cycle-8maryprepsrelease.png" class="media" title="git_branch_model:git-workflow-release-cycle-8maryprepsrelease.png"><img src="/0/lib/exe/fetch.php?media=git_branch_model:git-workflow-release-cycle-8maryprepsrelease.png" class="mediacenter" alt="" /></a>
While John is still working on his feature, Mary starts to prepare the first official release of the project. Like feature development, she uses a new branch to encapsulate the release preparations. This step is also where the release’s version number is established:
</p>
<pre class="code">git checkout -b release-0.1 develop</pre>

<p>
This branch is a place to clean up the release, test everything, update the documentation, and do any other kind of preparation for the upcoming release. It’s like a feature branch dedicated to polishing the release.
</p>

<p>
As soon as Mary creates this branch and pushes it to the central repository, the release is feature-frozen. Any functionality that isn’t already in develop is postponed until the next release cycle.
</p>

</div>
<!-- EDIT11 SECTION "Mary begins to prepare a release" [6269-7127] -->
<h3 class="sectionedit12" id="mary_finishes_the_release">Mary finishes the release</h3>
<div class="level3">

<p>
<a href="/0/lib/exe/detail.php?id=git_branch_modle%3Agit-workflow-gitflow&amp;media=git_branch_model:git-workflow-release-cycle-9maryfinishes.png" class="media" title="git_branch_model:git-workflow-release-cycle-9maryfinishes.png"><img src="/0/lib/exe/fetch.php?media=git_branch_model:git-workflow-release-cycle-9maryfinishes.png" class="mediacenter" alt="" /></a>
Once the release is ready to ship, Mary merges it into master and develop, then deletes the release branch. It’s important to merge back into develop because critical updates may have been added to the release branch and they need to be accessible to new features. Again, if Mary’s organization stresses code review, this would be an ideal place for a pull request.
</p>
<pre class="code">git checkout master
git merge release-0.1
git push
git checkout develop
git merge release-0.1
git push
git branch -d release-0.1</pre>

<p>
Release branches act as a buffer between feature development (develop) and public releases (master). Whenever you merge something into master, you should tag the commit for easy reference:
</p>
<pre class="code">git tag -a 0.1 -m &quot;Initial public release&quot; master
git push --tags</pre>

<p>
Git comes with several hooks, which are scripts that execute whenever a particular event occurs within a repository. It’s possible to configure a hook to automatically build a public release whenever you push the master branch to the central repository or push a tag.
</p>

</div>
<!-- EDIT12 SECTION "Mary finishes the release" [7128-8287] -->
<h3 class="sectionedit13" id="end-user_discovers_a_bug">End-user discovers a bug</h3>
<div class="level3">

<p>
<a href="/0/lib/exe/detail.php?id=git_branch_modle%3Agit-workflow-gitflow&amp;media=git_branch_model:git-workflow-gitflow-enduserbug.png" class="media" title="git_branch_model:git-workflow-gitflow-enduserbug.png"><img src="/0/lib/exe/fetch.php?media=git_branch_model:git-workflow-gitflow-enduserbug.png" class="mediacenter" alt="" /></a>
</p>

<p>
After shipping the release, Mary goes back to developing features for the next release with John. That is, until an end-user opens a ticket complaining about a bug in the current release. To address the bug, Mary (or John) creates a maintenance branch off of master, fixes the issue with as many commits as necessary, then merges it directly back into master.
</p>
<pre class="code">git checkout -b issue-#001 master
# Fix the bug
git checkout master
git merge issue-#001
git push</pre>

<p>
Like release branches, maintenance branches contain important updates that need to be included in develop, so Mary needs to perform that merge as well. Then, she’s free to delete the branch:
</p>
<pre class="code">git checkout develop
git merge issue-#001
git push
git branch -d issue-#001</pre>

</div>
<!-- EDIT13 SECTION "End-user discovers a bug" [8288-9141] -->
<h2 class="sectionedit14" id="where_to_go_from_here">Where To Go From Here</h2>
<div class="level2">

<p>
By now, you’re hopefully quite comfortable with the Centralized Workflow, the Feature Branch Workflow, and the Gitflow Workflow. You should also have a solid grasp on the potential of local repositories, the push/pull pattern, and Git&#039;s robust branching and merging model.
</p>

<p>
Remember that the workflows presented here are merely examples of what’s possible—they are not hard-and-fast rules for using Git in the workplace. So, don&#039;t be afraid to adopt some aspects of a workflow and disregard others. The goal should always be to make Git work for you, not the other way around.
</p>

</div>
<!-- EDIT14 SECTION "Where To Go From Here" [9142-] -->