a:235:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:19:"Gitflow分支模式";i:1;i:1;i:2;i:1;}i:2;i:1;}i:2;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:1;}i:3;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1;}i:4;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:42:":git_branch_model:git-workflow-gitflow.png";i:1;s:0:"";i:2;s:6:"center";i:3;s:3:"300";i:4;N;i:5;s:5:"cache";i:6;s:7:"details";}i:2;i:33;}i:5;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"
The ";}i:2;i:86;}i:6;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:55:"http://nvie.com/posts/a-successful-git-branching-model/";i:1;s:16:"Gitflow Workflow";}i:2;i:91;}i:7;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:57:" section below is derived from Vincent Driessen at nvie. ";}i:2;i:167;}i:8;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:224;}i:9;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:224;}i:10;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:1;i:1;s:7:"#0000EE";}i:2;i:1;i:3;s:12:"<fc #0000EE>";}i:2;i:230;}i:11;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:176:"Gitflow 围绕产品发布定义了一系列严格用途的的多任务分支模式。但比任务分支模式更复杂，但对于管理大型项目提供了强壮的框架。";}i:2;i:3;i:3;s:176:"Gitflow 围绕产品发布定义了一系列严格用途的的多任务分支模式。但比任务分支模式更复杂，但对于管理大型项目提供了强壮的框架。";}i:2;i:242;}i:12;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:4;i:1;s:4:"#ff0";}i:2;i:4;i:3;s:5:"</fc>";}i:2;i:418;}i:13;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:423;}i:14;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:423;}i:15;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:1;i:1;s:7:"#0000EE";}i:2;i:1;i:3;s:12:"<fc #0000EE>";}i:2;i:426;}i:16;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:320:"相对于任务分支，gitflow没有增加新的概念和命令，它只是赋予分支特定的角色，定义了分支之间什么时间和如何交互。 这些分支专门用来开发、维护、发布等功能。你也可以利用任务分支的所有其他好处，pull request、实验开发、有效协作等。";}i:2;i:3;i:3;s:320:"相对于任务分支，gitflow没有增加新的概念和命令，它只是赋予分支特定的角色，定义了分支之间什么时间和如何交互。 这些分支专门用来开发、维护、发布等功能。你也可以利用任务分支的所有其他好处，pull request、实验开发、有效协作等。";}i:2;i:438;}i:17;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:4;i:1;s:4:"#ff0";}i:2;i:4;i:3;s:5:"</fc>";}i:2;i:758;}i:18;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:763;}i:19;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:766;}i:20;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:12:"流程描述";i:1;i:2;i:2;i:766;}i:2;i:766;}i:21;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:766;}i:22;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:766;}i:23;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:1;i:1;s:7:"#0000EE";}i:2;i:1;i:3;s:12:"<fc #0000EE>";}i:2;i:794;}i:24;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:242:"Gitflow 依然使用一个中央仓库作为所有团队成员的官方项目库。而且同其他工作流程一样，开发者依然在本地开发，并提交分支到中央仓库。这种模式最大的不同是项目中的分支结构。";}i:2;i:3;i:3;s:242:"Gitflow 依然使用一个中央仓库作为所有团队成员的官方项目库。而且同其他工作流程一样，开发者依然在本地开发，并提交分支到中央仓库。这种模式最大的不同是项目中的分支结构。";}i:2;i:806;}i:25;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:4;i:1;s:4:"#ff0";}i:2;i:4;i:3;s:5:"</fc>";}i:2;i:1048;}i:26;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:0:"";}i:2;i:1053;}i:27;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1054;}i:28;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1054;}i:29;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:38:"产品历史分支(Master 和 Develop)";i:1;i:3;i:2;i:1054;}i:2;i:1054;}i:30;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:1054;}i:31;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1054;}i:32;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:1;i:1;s:7:"#0000EE";}i:2;i:1;i:3;s:12:"<fc #0000EE>";}i:2;i:1103;}i:33;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:264:"相对于项目库中的单个master分支，gitflows用两个分支来记录项目演变历史。 master分支记录项目的正式发布历史，开发分支记录功能集成迭代过程。按照产品的版本演进在master主分支上很便利贴上标签。";}i:2;i:3;i:3;s:264:"相对于项目库中的单个master分支，gitflows用两个分支来记录项目演变历史。 master分支记录项目的正式发布历史，开发分支记录功能集成迭代过程。按照产品的版本演进在master主分支上很便利贴上标签。";}i:2;i:1115;}i:34;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:4;i:1;s:4:"#ff0";}i:2;i:4;i:3;s:5:"</fc>";}i:2;i:1379;}i:35;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1384;}i:36;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1384;}i:37;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:60:":git_branch_model:git-workflow-release-cycle-1historical.png";i:1;s:0:"";i:2;s:6:"center";i:3;N;i:4;N;i:5;s:5:"cache";i:6;s:7:"details";}i:2;i:1386;}i:38;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:86:"
The rest of this workflow revolves around the distinction between these two branches.";}i:2;i:1453;}i:39;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1539;}i:40;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1539;}i:41;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:1;i:1;s:7:"#0000EE";}i:2;i:1;i:3;s:12:"<fc #0000EE>";}i:2;i:1541;}i:42;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:66:"此工作流的其余部分围绕着这两个分支差异展开。";}i:2;i:3;i:3;s:66:"此工作流的其余部分围绕着这两个分支差异展开。";}i:2;i:1553;}i:43;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:4;i:1;s:4:"#ff0";}i:2;i:4;i:3;s:5:"</fc>";}i:2;i:1619;}i:44;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1624;}i:45;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1626;}i:46;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:28:"任务分支(Feature Branch)";i:1;i:3;i:2;i:1626;}i:2;i:1626;}i:47;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:1626;}i:48;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1626;}i:49;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:1;i:1;s:7:"#0000EE";}i:2;i:1;i:3;s:12:"<fc #0000EE>";}i:2;i:1666;}i:50;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:371:"新功能的开发都在工程师本地分支上，最后要提交到中央项目仓库用于备份和协作开发。但是，其他分支模式都是从主干master开出分支，而gitflow中的任务分支是从开发分支(develop）上创建的。当任务完成后，任务分支合并回开发分支(develop).任务分支从不直接和主干(master）打交道。";}i:2;i:3;i:3;s:371:"新功能的开发都在工程师本地分支上，最后要提交到中央项目仓库用于备份和协作开发。但是，其他分支模式都是从主干master开出分支，而gitflow中的任务分支是从开发分支(develop）上创建的。当任务完成后，任务分支合并回开发分支(develop).任务分支从不直接和主干(master）打交道。";}i:2;i:1678;}i:51;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:4;i:1;s:4:"#ff0";}i:2;i:4;i:3;s:5:"</fc>";}i:2;i:2049;}i:52;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2054;}i:53;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2054;}i:54;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:57:":git_branch_model:git-workflow-release-cycle-2feature.png";i:1;s:0:"";i:2;s:6:"center";i:3;N;i:4;N;i:5;s:5:"cache";i:6;s:7:"details";}i:2;i:2056;}i:55;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2120;}i:56;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2120;}i:57;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:1;i:1;s:7:"#0000EE";}i:2;i:1;i:3;s:12:"<fc #0000EE>";}i:2;i:2123;}i:58;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:106:"任务分支结合开发分支，就可以满足对于各种开发用途，gitflow还不止这些功能。";}i:2;i:3;i:3;s:106:"任务分支结合开发分支，就可以满足对于各种开发用途，gitflow还不止这些功能。";}i:2;i:2135;}i:59;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:4;i:1;s:4:"#ff0";}i:2;i:4;i:3;s:5:"</fc>";}i:2;i:2241;}i:60;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2246;}i:61;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2248;}i:62;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:34:"发布分支（Release Branches）";i:1;i:3;i:2;i:2248;}i:2;i:2248;}i:63;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:2248;}i:64;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2248;}i:65;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:57:":git_branch_model:git-workflow-release-cycle-3release.png";i:1;s:0:"";i:2;s:6:"center";i:3;N;i:4;N;i:5;s:5:"cache";i:6;s:7:"details";}i:2;i:2291;}i:66;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2355;}i:67;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2355;}i:68;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:1;i:1;s:7:"#0000EE";}i:2;i:1;i:3;s:12:"<fc #0000EE>";}i:2;i:2358;}i:69;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:521:"当代码逐渐成熟，准备发布的时候。你就需要从开发分支上开出一个发布分支。这也就意味着你进入这一轮发布周期。在这以后，发布分支不接受新的功能代码的合并，只合并缺陷修复的代码，文档修改和其他面向发布的任务。如果准备发布，发布分支就合并到master主分支，并贴上产品版本标签。同时，发布分支也要合并回开发分支，因为发布分支建立来，一些紧急修复也要合并回开发分支. ";}i:2;i:3;i:3;s:521:"当代码逐渐成熟，准备发布的时候。你就需要从开发分支上开出一个发布分支。这也就意味着你进入这一轮发布周期。在这以后，发布分支不接受新的功能代码的合并，只合并缺陷修复的代码，文档修改和其他面向发布的任务。如果准备发布，发布分支就合并到master主分支，并贴上产品版本标签。同时，发布分支也要合并回开发分支，因为发布分支建立来，一些紧急修复也要合并回开发分支. ";}i:2;i:2370;}i:70;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:4;i:1;s:4:"#ff0";}i:2;i:4;i:3;s:5:"</fc>";}i:2;i:2891;}i:71;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2896;}i:72;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2896;}i:73;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:340:"发布的准备过程使用一个专门的分支，便于团队专心致力发布前的工作，并不阻碍其他人同时进入下一个发布循环。这样也定义和规范了开发的不同阶段。比如说： 工程师很方便说“本周我们准备发布产品4.0”，而且在代码仓库里，我们也看到真实的行动。";}i:2;i:2900;}i:74;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3240;}i:75;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:125:"
Common conventions:
惯例：

    branch off: develop
    merge into: master
    naming convention: release-* or release/*
";i:1;N;i:2;N;}i:2;i:3247;}i:76;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3383;}i:77;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:32:"维护分支（Hot Fix Branch）";i:1;i:3;i:2;i:3383;}i:2;i:3383;}i:78;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:3383;}i:79;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3383;}i:80;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:61:":git_branch_model:git-workflow-release-cycle-4maintenance.png";i:1;s:0:"";i:2;s:6:"center";i:3;N;i:4;N;i:5;s:5:"cache";i:6;s:7:"details";}i:2;i:3424;}i:81;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3492;}i:82;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3492;}i:83;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:1;i:1;s:7:"#0000EE";}i:2;i:1;i:3;s:12:"<fc #0000EE>";}i:2;i:3495;}i:84;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:24:"维护分支，或者叫";}i:2;i:3;i:3;s:24:"维护分支，或者叫";}i:2;i:3507;}i:85;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:3531;}i:86;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:253:"hotfix”分支用于快速修补产品的安全类问题。这是唯一直接从master分支上开出的分支。一旦修复完成，代码应合并回master主干和develop分支（或者当前发布分支），master分支上也要贴一个标签。";}i:2;i:3;i:3;s:253:"hotfix”分支用于快速修补产品的安全类问题。这是唯一直接从master分支上开出的分支。一旦修复完成，代码应合并回master主干和develop分支（或者当前发布分支），master分支上也要贴一个标签。";}i:2;i:3532;}i:87;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:4;i:1;s:4:"#ff0";}i:2;i:4;i:3;s:5:"</fc>";}i:2;i:3785;}i:88;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3790;}i:89;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3790;}i:90;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:1;i:1;s:7:"#0000EE";}i:2;i:1;i:3;s:12:"<fc #0000EE>";}i:2;i:3793;}i:91;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:214:"独立的维护分支的出现，可以让团队成员无需中断发布流程，或者必须等在下次发布修复缺陷。维护分支是直接从master分支上直接开出用于紧急修复的发布分支。 ";}i:2;i:3;i:3;s:214:"独立的维护分支的出现，可以让团队成员无需中断发布流程，或者必须等在下次发布修复缺陷。维护分支是直接从master分支上直接开出用于紧急修复的发布分支。 ";}i:2;i:3805;}i:92;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:4;i:1;s:4:"#ff0";}i:2;i:4;i:3;s:5:"</fc>";}i:2;i:4019;}i:93;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4024;}i:94;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:4027;}i:95;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:12:"实例演示";i:1;i:2;i:2;i:4027;}i:2;i:4027;}i:96;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:4027;}i:97;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4027;}i:98;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:87:"下面演示发布循环的一次过程。假设你已经有中央的官方项目库，";}i:2;i:4051;}i:99;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4138;}i:100;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:4140;}i:101;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:18:"创建开发分支";i:1;i:3;i:2;i:4140;}i:2;i:4140;}i:102;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:4140;}i:103;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4140;}i:104;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:59:":git_branch_model:git-workflow-release-cycle-5createdev.png";i:1;s:0:"";i:2;s:6:"center";i:3;N;i:4;N;i:5;s:5:"cache";i:6;s:7:"details";}i:2;i:4169;}i:105;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4235;}i:106;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4235;}i:107;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:1;i:1;s:7:"#0000EE";}i:2;i:1;i:3;s:12:"<fc #0000EE>";}i:2;i:4237;}i:108;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:182:"第一步，从master上创建开发分支(developt)。简单的方法是，某个工程师在本地从master上创建一个叫develop的分支，然后提交到中央项目仓库：";}i:2;i:3;i:3;s:182:"第一步，从master上创建开发分支(developt)。简单的方法是，某个工程师在本地从master上创建一个叫develop的分支，然后提交到中央项目仓库：";}i:2;i:4249;}i:109;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:4;i:1;s:4:"#ff0";}i:2;i:4;i:3;s:5:"</fc>";}i:2;i:4431;}i:110;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4436;}i:111;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:47:"
git branch develop
git push -u origin develop
";i:1;N;i:2;N;}i:2;i:4443;}i:112;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4443;}i:113;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:209:"This branch will contain the complete history of the project, whereas master will contain an abridged version. Other developers should now clone the central repository and create a tracking branch for develop:";}i:2;i:4500;}i:114;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4709;}i:115;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4709;}i:116;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:1;i:1;s:7:"#0000EE";}i:2;i:1;i:3;s:12:"<fc #0000EE>";}i:2;i:4711;}i:117;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:171:"这个分支包含了产品完整的历史路线，因为master主干包含产品的基线历史。接下来，团队成员克隆中央仓库，本地创建远程分支：";}i:2;i:3;i:3;s:171:"这个分支包含了产品完整的历史路线，因为master主干包含产品的基线历史。接下来，团队成员克隆中央仓库，本地创建远程分支：";}i:2;i:4723;}i:118;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:4;i:1;s:4:"#ff0";}i:2;i:4;i:3;s:5:"</fc>";}i:2;i:4894;}i:119;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4899;}i:120;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:83:"
git clone ssh://user@host/path/to/repo.git
git checkout -b develop origin/develop
";i:1;N;i:2;N;}i:2;i:4907;}i:121;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4907;}i:122;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:42:"每个成员现在都有本地拷贝。   ";}i:2;i:5001;}i:123;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5044;}i:124;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:5044;}i:125;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:29:"Mary 和 John 开发新功能";i:1;i:3;i:2;i:5044;}i:2;i:5044;}i:126;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:5044;}i:127;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5044;}i:128;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:5082;}i:129;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:66:":git_branch_model:git-workflow-release-cycle-6maryjohnbeginnew.png";i:1;s:0:"";i:2;s:6:"center";i:3;N;i:4;N;i:5;s:5:"cache";i:6;s:7:"details";}i:2;i:5083;}i:130;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5156;}i:131;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5156;}i:132;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:241:"我们的例子中，John和Mary有不同的需求开发任务，他们本地创建各自的任务分支去完成需求。以往的分支模式都是从master上创建任务分支。然而gitflow模式却是从develop上创建任务分支：";}i:2;i:5160;}i:133;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5401;}i:134;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:38:"
git checkout -b some-feature develop
";i:1;N;i:2;N;}i:2;i:5408;}i:135;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5408;}i:136;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:81:"他俩在各自的分支上例行步骤完成开发：编辑，缓存，提交：";}i:2;i:5456;}i:137;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5537;}i:138;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:43:"
git status
git add <some-file>
git commit
";i:1;N;i:2;N;}i:2;i:5544;}i:139;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:5597;}i:140;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:23:"Mary 完成任务开发";i:1;i:3;i:2;i:5597;}i:2;i:5597;}i:141;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:5597;}i:142;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5597;}i:143;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:62:":git_branch_model:git-workflow-release-cycle-7maryfinishes.png";i:1;s:0:"";i:2;s:6:"center";i:3;N;i:4;N;i:5;s:5:"cache";i:6;s:7:"details";}i:2;i:5629;}i:144;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5698;}i:145;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5698;}i:146;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:1;i:1;s:7:"#0000EE";}i:2;i:1;i:3;s:12:"<fc #0000EE>";}i:2;i:5702;}i:147;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:310:"Mary完成了自己的需求开发任务。如果她的团队使用了pull request，这是合适的时机去发起pull requests 要求合并自己的代码进入develop分支。 如果团队没有使用 pull requests，她合并任务分支进入本地的开发分支，然后推送到远端中央项目库：";}i:2;i:3;i:3;s:310:"Mary完成了自己的需求开发任务。如果她的团队使用了pull request，这是合适的时机去发起pull requests 要求合并自己的代码进入develop分支。 如果团队没有使用 pull requests，她合并任务分支进入本地的开发分支，然后推送到远端中央项目库：";}i:2;i:5714;}i:148;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:4;i:1;s:4:"#ff0";}i:2;i:4;i:3;s:5:"</fc>";}i:2;i:6024;}i:149;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:0:"";}i:2;i:6029;}i:150;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6035;}i:151;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:105:"
git pull origin develop
git checkout develop
git merge some-feature
git push
git branch -d some-feature
";i:1;N;i:2;N;}i:2;i:6035;}i:152;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6035;}i:153;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:172:"第一行命令确保本地develop分支和远端同步。注意的是任务分支不会直接合并入master，如何解决冲突和中央集中分支模式是一致的。";}i:2;i:6151;}i:154;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6323;}i:155;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:6326;}i:156;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:28:"Mary开始计划发布产品";i:1;i:3;i:2;i:6326;}i:2;i:6326;}i:157;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:6326;}i:158;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6326;}i:159;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:66:":git_branch_model:git-workflow-release-cycle-8maryprepsrelease.png";i:1;s:0:"";i:2;s:6:"center";i:3;N;i:4;N;i:5;s:5:"cache";i:6;s:7:"details";}i:2;i:6363;}i:160;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6436;}i:161;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6436;}i:162;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:1;i:1;s:7:"#0000EE";}i:2;i:1;i:3;s:12:"<fc #0000EE>";}i:2;i:6439;}i:163;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:194:"John还在继续开发他的代码，Mary已经开始准备她的项目第一次发布。她用一个新分支专门用来管理发布过程。这一步确立了产品的第一个版本号0.1：";}i:2;i:3;i:3;s:194:"John还在继续开发他的代码，Mary已经开始准备她的项目第一次发布。她用一个新分支专门用来管理发布过程。这一步确立了产品的第一个版本号0.1：";}i:2;i:6451;}i:164;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:4;i:1;s:4:"#ff0";}i:2;i:4;i:3;s:5:"</fc>";}i:2;i:6645;}i:165;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6650;}i:166;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:37:"
git checkout -b release-0.1 develop
";i:1;N;i:2;N;}i:2;i:6657;}i:167;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6657;}i:168;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:218:"This branch is a place to clean up the release, test everything, update the documentation, and do any other kind of preparation for the upcoming release. It’s like a feature branch dedicated to polishing the release.";}i:2;i:6704;}i:169;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6922;}i:170;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6922;}i:171;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:200:"As soon as Mary creates this branch and pushes it to the central repository, the release is feature-frozen. Any functionality that isn’t already in develop is postponed until the next release cycle.";}i:2;i:6924;}i:172;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7124;}i:173;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:7127;}i:174;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:17:"Mary 完成发布";i:1;i:3;i:2;i:7127;}i:2;i:7127;}i:175;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:7127;}i:176;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7127;}i:177;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:62:":git_branch_model:git-workflow-release-cycle-9maryfinishes.png";i:1;s:0:"";i:2;s:6:"center";i:3;N;i:4;N;i:5;s:5:"cache";i:6;s:7:"details";}i:2;i:7153;}i:178;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:370:"
Once the release is ready to ship, Mary merges it into master and develop, then deletes the release branch. It’s important to merge back into develop because critical updates may have been added to the release branch and they need to be accessible to new features. Again, if Mary’s organization stresses code review, this would be an ideal place for a pull request.";}i:2;i:7222;}i:179;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7592;}i:180;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7592;}i:181;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:1;i:1;s:7:"#0000EE";}i:2;i:1;i:3;s:12:"<fc #0000EE>";}i:2;i:7595;}i:182;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:270:"

一旦产品发布准备完毕，Mary合并发布分支到主干分支（master）和开发分支（develop），然后删除发布分支。发布分支合并回开发分支很关键。如果mary的团队强调代码评审，这时发起pull request 是个好时机。";}i:2;i:3;i:3;s:270:"

一旦产品发布准备完毕，Mary合并发布分支到主干分支（master）和开发分支（develop），然后删除发布分支。发布分支合并回开发分支很关键。如果mary的团队强调代码评审，这时发起pull request 是个好时机。";}i:2;i:7607;}i:183;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:4;i:1;s:4:"#ff0";}i:2;i:4;i:3;s:5:"</fc>";}i:2;i:7877;}i:184;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7882;}i:185;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:130:"
git checkout master
git merge release-0.1
git push
git checkout develop
git merge release-0.1
git push
git branch -d release-0.1
";i:1;N;i:2;N;}i:2;i:7889;}i:186;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7889;}i:187;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:188:"Release branches act as a buffer between feature development (develop) and public releases (master). Whenever you merge something into master, you should tag the commit for easy reference:";}i:2;i:8028;}i:188;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8216;}i:189;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8216;}i:190;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:1;i:1;s:7:"#0000EE";}i:2;i:1;i:3;s:12:"<fc #0000EE>";}i:2;i:8218;}i:191;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:158:"
发布分支扮演了缓存在任务任务分支（deveop）和主发布分支（master）。合并进入master分支，都需要追加标签便于参考：
";}i:2;i:3;i:3;s:158:"
发布分支扮演了缓存在任务任务分支（deveop）和主发布分支（master）。合并进入master分支，都需要追加标签便于参考：
";}i:2;i:8230;}i:192;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:4;i:1;s:4:"#ff0";}i:2;i:4;i:3;s:5:"</fc>";}i:2;i:8388;}i:193;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:0:"";}i:2;i:8393;}i:194;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8399;}i:195;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:67:"
git tag -a 0.1 -m "Initial public release" master
git push --tags
";i:1;N;i:2;N;}i:2;i:8399;}i:196;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8399;}i:197;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:269:"Git comes with several hooks, which are scripts that execute whenever a particular event occurs within a repository. It’s possible to configure a hook to automatically build a public release whenever you push the master branch to the central repository or push a tag.";}i:2;i:8475;}i:198;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8744;}i:199;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:8747;}i:200;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:15:"用户发现bug";i:1;i:3;i:2;i:8747;}i:2;i:8747;}i:201;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:8747;}i:202;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8747;}i:203;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:53:":git_branch_model:git-workflow-gitflow-enduserbug.png";i:1;s:0:"";i:2;s:6:"center";i:3;N;i:4;N;i:5;s:5:"cache";i:6;s:7:"details";}i:2;i:8771;}i:204;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8831;}i:205;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8831;}i:206;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:359:"After shipping the release, Mary goes back to developing features for the next release with John. That is, until an end-user opens a ticket complaining about a bug in the current release. To address the bug, Mary (or John) creates a maintenance branch off of master, fixes the issue with as many commits as necessary, then merges it directly back into master.";}i:2;i:8833;}i:207;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9192;}i:208;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9192;}i:209;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:1;i:1;s:7:"#0000EE";}i:2;i:1;i:3;s:12:"<fc #0000EE>";}i:2;i:9195;}i:210;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:193:"产品发布后，Mary返回继续开发新的任务，为下次发布准备。如果用户报告了缺陷，需要从master创建维护分支，修复问题后，直接合并回master分支。";}i:2;i:3;i:3;s:193:"产品发布后，Mary返回继续开发新的任务，为下次发布准备。如果用户报告了缺陷，需要从master创建维护分支，修复问题后，直接合并回master分支。";}i:2;i:9207;}i:211;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:4;i:1;s:4:"#ff0";}i:2;i:4;i:3;s:5:"</fc>";}i:2;i:9400;}i:212;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9405;}i:213;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:99:"
git checkout -b issue-#001 master
# Fix the bug
git checkout master
git merge issue-#001
git push
";i:1;N;i:2;N;}i:2;i:9412;}i:214;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9412;}i:215;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:192:"Like release branches, maintenance branches contain important updates that need to be included in develop, so Mary needs to perform that merge as well. Then, she’s free to delete the branch:";}i:2;i:9520;}i:216;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9712;}i:217;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9712;}i:218;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:1;i:1;s:7:"#0000EE";}i:2;i:1;i:3;s:12:"<fc #0000EE>";}i:2;i:9714;}i:219;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:172:"就像发布分支，维护分支包含了重要的代码修复，同样需要合并回开发分支，所有Mary需要执行合并，完事后，删除任务维护分支。";}i:2;i:3;i:3;s:172:"就像发布分支，维护分支包含了重要的代码修复，同样需要合并回开发分支，所有Mary需要执行合并，完事后，删除任务维护分支。";}i:2;i:9726;}i:220;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:4;i:1;s:4:"#ff0";}i:2;i:4;i:3;s:5:"</fc>";}i:2;i:9898;}i:221;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:0:"";}i:2;i:9903;}i:222;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9909;}i:223;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:77:"
git checkout develop
git merge issue-#001
git push
git branch -d issue-#001
";i:1;N;i:2;N;}i:2;i:9909;}i:224;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:9996;}i:225;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:21:"Where To Go From Here";i:1;i:2;i:2;i:9996;}i:2;i:9996;}i:226;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:9996;}i:227;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9996;}i:228;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:274:"By now, you’re hopefully quite comfortable with the Centralized Workflow, the Feature Branch Workflow, and the Gitflow Workflow. You should also have a solid grasp on the potential of local repositories, the push/pull pattern, and Git's robust branching and merging model.";}i:2;i:10029;}i:229;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10303;}i:230;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10303;}i:231;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:306:"Remember that the workflows presented here are merely examples of what’s possible—they are not hard-and-fast rules for using Git in the workplace. So, don't be afraid to adopt some aspects of a workflow and disregard others. The goal should always be to make Git work for you, not the other way around.";}i:2;i:10305;}i:232;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10611;}i:233;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:10624;}i:234;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:10624;}}