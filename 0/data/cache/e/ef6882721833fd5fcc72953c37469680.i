a:247:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:18:"任务分支模式";i:1;i:1;i:2;i:1;}i:2;i:1;}i:2;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:1;}i:3;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1;}i:4;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:51:":git_branch_model:git-workflow-feature-branch-1.png";i:1;s:0:"";i:2;s:6:"center";i:3;N;i:4;N;i:5;s:5:"cache";i:6;s:7:"details";}i:2;i:32;}i:5;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:197:"
Once you've got the hang of the Centralized Workflow, adding feature branches to your development process is an easy way to encourage collaboration and streamline communication between developers.";}i:2;i:90;}i:6;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:287;}i:7;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:287;}i:8;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:1;i:1;s:7:"#0000EE";}i:2;i:1;i:3;s:12:"<fc #0000EE>";}i:2;i:289;}i:9;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:136:"一旦熟悉了集中式的git开发流程，再使用特性分支开发就容易多了，并加强了协作性而且简便了沟通。
";}i:2;i:3;i:3;s:136:"一旦熟悉了集中式的git开发流程，再使用特性分支开发就容易多了，并加强了协作性而且简便了沟通。
";}i:2;i:301;}i:10;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:4;i:1;s:4:"#ff0";}i:2;i:4;i:3;s:5:"</fc>";}i:2;i:437;}i:11;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:409:"
The core idea behind the Feature Branch Workflow is that all feature development should take place in a dedicated branch instead of the master branch. This encapsulation makes it easy for multiple developers to work on a particular feature without disturbing the main codebase. It also means the master branch will never contain broken code, which is a huge advantage for continuous integration environments.";}i:2;i:442;}i:12;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:851;}i:13;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:851;}i:14;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:1;i:1;s:7:"#0000EE";}i:2;i:1;i:3;s:12:"<fc #0000EE>";}i:2;i:853;}i:15;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:217:"特性分支流程的核心就是所有新需求都在分支上开发。大家都在不同的分支上开发，互相不干扰，主干（master)不会有无法编译的代码，持续集成就需要这种的特性。";}i:2;i:3;i:3;s:217:"特性分支流程的核心就是所有新需求都在分支上开发。大家都在不同的分支上开发，互相不干扰，主干（master)不会有无法编译的代码，持续集成就需要这种的特性。";}i:2;i:865;}i:16;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:4;i:1;s:4:"#ff0";}i:2;i:4;i:3;s:5:"</fc>";}i:2;i:1082;}i:17;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1087;}i:18;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1087;}i:19;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:484:"Encapsulating feature development also makes it possible to leverage pull requests, which are a way to initiate discussions around a branch. They give other developers the opportunity to sign off on a feature before it gets integrated into the official project. Or, if you get stuck in the middle of a feature, you can open a pull request asking for suggestions from your colleagues. The point is, pull requests make it incredibly easy for your team to comment on each other’s work.";}i:2;i:1089;}i:20;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1573;}i:21;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1573;}i:22;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:1;i:1;s:7:"#0000EE";}i:2;i:1;i:3;s:12:"<fc #0000EE>";}i:2;i:1575;}i:23;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:329:"每个需求都用分支来开发，这样就可以在分支上发起讨论，在分支合并入项目主库前，其他工程师也有机会广播这个特性。如果对这个需求你还有一些想法，你可以创建一个pull request咨询你的同事。 pull request 让其他开发者在合并代码前，评审代码。";}i:2;i:3;i:3;s:329:"每个需求都用分支来开发，这样就可以在分支上发起讨论，在分支合并入项目主库前，其他工程师也有机会广播这个特性。如果对这个需求你还有一些想法，你可以创建一个pull request咨询你的同事。 pull request 让其他开发者在合并代码前，评审代码。";}i:2;i:1587;}i:24;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:4;i:1;s:4:"#ff0";}i:2;i:4;i:3;s:5:"</fc>";}i:2;i:1916;}i:25;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1921;}i:26;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1923;}i:27;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:12:"流程描述";i:1;i:2;i:2;i:1923;}i:2;i:1923;}i:28;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:1923;}i:29;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1923;}i:30;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:417:"The Feature Branch Workflow still uses a central repository, and master still represents the official project history. But, instead of committing directly on their local master branch, developers create a new branch every time they start work on a new feature. Feature branches should have descriptive names, like animated-menu-items or issue-#1061. The idea is to give a clear, highly-focused purpose to each branch.";}i:2;i:1947;}i:31;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2364;}i:32;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2364;}i:33;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:1;i:1;s:7:"#0000EE";}i:2;i:1;i:3;s:12:"<fc #0000EE>";}i:2;i:2366;}i:34;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:242:"任务分支模式任然需要一个中央仓库，master分支存放的是稳定的生产版本。每当有新任务的时候，工程师在本地创建新分支。分支的名字应该能说清楚分支的目的。比如分支Issue-#1061。";}i:2;i:3;i:3;s:242:"任务分支模式任然需要一个中央仓库，master分支存放的是稳定的生产版本。每当有新任务的时候，工程师在本地创建新分支。分支的名字应该能说清楚分支的目的。比如分支Issue-#1061。";}i:2;i:2378;}i:35;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:4;i:1;s:4:"#ff0";}i:2;i:4;i:3;s:5:"</fc>";}i:2;i:2620;}i:36;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2625;}i:37;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2625;}i:38;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:198:"Git makes no technical distinction between the master branch and feature branches, so developers can edit, stage, and commit changes to a feature branch just as they did in the Centralized Workflow.";}i:2;i:2627;}i:39;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2825;}i:40;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2825;}i:41;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:1;i:1;s:7:"#0000EE";}i:2;i:1;i:3;s:12:"<fc #0000EE>";}i:2;i:2827;}i:42;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:157:"对于Git来说，master分支和任务分支在功能上没有什么不一样。 工程师在任务分支上的活动和在中央集中式的流程一样。";}i:2;i:3;i:3;s:157:"对于Git来说，master分支和任务分支在功能上没有什么不一样。 工程师在任务分支上的活动和在中央集中式的流程一样。";}i:2;i:2839;}i:43;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:4;i:1;s:4:"#ff0";}i:2;i:4;i:3;s:5:"</fc>";}i:2;i:2996;}i:44;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3001;}i:45;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3001;}i:46;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:399:"In addition, feature branches can (and should) be pushed to the central repository. This makes it possible to share a feature with other developers without touching any official code. Since master is the only “special” branch, storing several feature branches on the central repository doesn’t pose any problems. Of course, this is also a convenient way to back up everybody’s local commits.";}i:2;i:3003;}i:47;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3402;}i:48;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3402;}i:49;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:1;i:1;s:7:"#0000EE";}i:2;i:1;i:3;s:12:"<fc #0000EE>";}i:2;i:3404;}i:50;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:171:"任务分支在本地每天提交后，也需要同步到中央仓库，其他工程师不用动稳定代码，就可以看到新功能的代码。作为本地的备份。";}i:2;i:3;i:3;s:171:"任务分支在本地每天提交后，也需要同步到中央仓库，其他工程师不用动稳定代码，就可以看到新功能的代码。作为本地的备份。";}i:2;i:3416;}i:51;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:4;i:1;s:4:"#ff0";}i:2;i:4;i:3;s:5:"</fc>";}i:2;i:3587;}i:52;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3592;}i:53;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3594;}i:54;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:27:"合并请求(Pull Requests)";i:1;i:3;i:2;i:3594;}i:2;i:3594;}i:55;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:3594;}i:56;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3594;}i:57;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:428:"Aside from isolating feature development, branches make it possible to discuss changes via pull requests. Once someone completes a feature, they don’t immediately merge it into master. Instead, they push the feature branch to the central server and file a pull request asking to merge their additions into master. This gives other developers an opportunity to review the changes before they become a part of the main codebase.";}i:2;i:3631;}i:58;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4059;}i:59;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4059;}i:60;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:1;i:1;s:7:"#0000EE";}i:2;i:1;i:3;s:12:"<fc #0000EE>";}i:2;i:4061;}i:61;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:309:" 除了孤立的特性开发，通过pull request 也使得讨论变更成为可能。一旦完成了某个任务， 你不能立即把它合并回主干。相反的，你发起一个合并请求，要求合并到主干上。这给了其他开发者有机会评审你的代码，然后才能合并回主干。";}i:2;i:3;i:3;s:309:" 除了孤立的特性开发，通过pull request 也使得讨论变更成为可能。一旦完成了某个任务， 你不能立即把它合并回主干。相反的，你发起一个合并请求，要求合并到主干上。这给了其他开发者有机会评审你的代码，然后才能合并回主干。";}i:2;i:4073;}i:62;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:4;i:1;s:4:"#ff0";}i:2;i:4;i:3;s:5:"</fc>";}i:2;i:4382;}i:63;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4387;}i:64;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4387;}i:65;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:519:"Code review is a major benefit of pull requests, but they’re actually designed to be a generic way to talk about code. You can think of pull requests as a discussion dedicated to a particular branch. This means that they can also be used much earlier in the development process. For example, if a developer needs help with a particular feature, all they have to do is file a pull request. Interested parties will be notified automatically, and they’ll be able to see the question right next to the relevant commits.";}i:2;i:4389;}i:66;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4908;}i:67;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4908;}i:68;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:1;i:1;s:7:"#0000EE";}i:2;i:1;i:3;s:12:"<fc #0000EE>";}i:2;i:4910;}i:69;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:87:" pull requests 的主要好处是代码评审。但它最初的应用是讨论代码。";}i:2;i:3;i:3;s:87:" pull requests 的主要好处是代码评审。但它最初的应用是讨论代码。";}i:2;i:4922;}i:70;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:4;i:1;s:4:"#ff0";}i:2;i:4;i:3;s:5:"</fc>";}i:2;i:5009;}i:71;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5014;}i:72;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5014;}i:73;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:316:"Once a pull request is accepted, the actual act of publishing a feature is much the same as in the Centralized Workflow. First, you need to make sure your local master is synchronized with the upstream master. Then, you merge the feature branch into master and push the updated master back to the central repository.";}i:2;i:5016;}i:74;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5332;}i:75;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5332;}i:76;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:1;i:1;s:7:"#0000EE";}i:2;i:1;i:3;s:12:"<fc #0000EE>";}i:2;i:5334;}i:77;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:94:" 一旦pull reques 被接受了，提交代码的功能和中央集中式工作流程一样。";}i:2;i:3;i:3;s:94:" 一旦pull reques 被接受了，提交代码的功能和中央集中式工作流程一样。";}i:2;i:5346;}i:78;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:4;i:1;s:4:"#ff0";}i:2;i:4;i:3;s:5:"</fc>";}i:2;i:5440;}i:79;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5445;}i:80;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5445;}i:81;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:159:"Pull requests can be facilitated by product repository management solutions like Bitbucket or Stash. View the Stash pull requests documentation for an example.";}i:2;i:5447;}i:82;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5606;}i:83;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5606;}i:84;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:1;i:1;s:7:"#0000EE";}i:2;i:1;i:3;s:12:"<fc #0000EE>";}i:2;i:5608;}i:85;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:70:" 对于一些git托管系统，pull request是非常有用的工具。";}i:2;i:3;i:3;s:70:" 对于一些git托管系统，pull request是非常有用的工具。";}i:2;i:5620;}i:86;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:4;i:1;s:4:"#ff0";}i:2;i:4;i:3;s:5:"</fc>";}i:2;i:5690;}i:87;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5695;}i:88;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:5698;}i:89;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:6:"演示";i:1;i:2;i:2;i:5698;}i:2;i:5698;}i:90;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:5698;}i:91;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5698;}i:92;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:134:"The example included below demonstrates a pull request as a form of code review, but remember that they can serve many other purposes.";}i:2;i:5716;}i:93;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5850;}i:94;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5850;}i:95;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:103:"本演示用pull request作为代码评审的形式之一，但要明白pull request 有很多用途。";}i:2;i:5852;}i:96;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5955;}i:97;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:5957;}i:98;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:26:"Mary 开始新任务开发";i:1;i:3;i:2;i:5957;}i:2;i:5957;}i:99;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:5957;}i:100;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5957;}i:101;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:51:":git_branch_model:git-workflow-feature-branch-2.png";i:1;s:0:"";i:2;s:6:"center";i:3;N;i:4;N;i:5;s:5:"cache";i:6;s:7:"details";}i:2;i:5992;}i:102;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:139:"
Before she starts developing a feature, Mary needs an isolated branch to work on. She can request a new branch with the following command:";}i:2;i:6050;}i:103;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6189;}i:104;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6189;}i:105;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:1;i:1;s:7:"#0000EE";}i:2;i:1;i:3;s:12:"<fc #0000EE>";}i:2;i:6191;}i:106;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:45:" Mary 首先创建一个新的任务分支：";}i:2;i:3;i:3;s:45:" Mary 首先创建一个新的任务分支：";}i:2;i:6203;}i:107;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:4;i:1;s:4:"#ff0";}i:2;i:4;i:3;s:5:"</fc>";}i:2;i:6248;}i:108;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6253;}i:109;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:38:"
git checkout -b marys-feature master
";i:1;N;i:2;N;}i:2;i:6260;}i:110;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6260;}i:111;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:277:"This checks out a branch called marys-feature based on master, and the -b flag tells Git to create the branch if it doesn’t already exist. On this branch, Mary edits, stages, and commits changes in the usual fashion, building up her feature with as many commits as necessary:";}i:2;i:6307;}i:112;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6584;}i:113;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6584;}i:114;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:1;i:1;s:7:"#0000EE";}i:2;i:1;i:3;s:12:"<fc #0000EE>";}i:2;i:6586;}i:115;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:44:" 在这个分支，Mary完成开发工作。";}i:2;i:3;i:3;s:44:" 在这个分支，Mary完成开发工作。";}i:2;i:6598;}i:116;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:4;i:1;s:4:"#ff0";}i:2;i:4;i:3;s:5:"</fc>";}i:2;i:6642;}i:117;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:0:"";}i:2;i:6647;}i:118;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6653;}i:119;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:43:"
git status
git add <some-file>
git commit
";i:1;N;i:2;N;}i:2;i:6653;}i:120;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:6705;}i:121;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:17:"Mary 要去午餐";i:1;i:3;i:2;i:6705;}i:2;i:6705;}i:122;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:6705;}i:123;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6705;}i:124;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:51:":git_branch_model:git-workflow-feature-branch-3.png";i:1;s:30:"Git Workflows: Feature Commits";i:2;s:6:"center";i:3;N;i:4;N;i:5;s:5:"cache";i:6;s:7:"details";}i:2;i:6732;}i:125;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6820;}i:126;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6820;}i:127;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:321:"Mary adds a few commits to her feature over the course of the morning. Before she leaves for lunch, it’s a good idea to push her feature branch up to the central repository. This serves as a convenient backup, but if Mary was collaborating with other developers, this would also give them access to her initial commits.";}i:2;i:6822;}i:128;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7143;}i:129;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7143;}i:130;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:1;i:1;s:7:"#0000EE";}i:2;i:1;i:3;s:12:"<fc #0000EE>";}i:2;i:7145;}i:131;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:132:" Mary 清晨开始了一些提交，午餐时，她最好能把任务分支提交到中央项目库。这也是一种备份方式。";}i:2;i:3;i:3;s:132:" Mary 清晨开始了一些提交，午餐时，她最好能把任务分支提交到中央项目库。这也是一种备份方式。";}i:2;i:7157;}i:132;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:4;i:1;s:4:"#ff0";}i:2;i:4;i:3;s:5:"</fc>";}i:2;i:7289;}i:133;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:0:"";}i:2;i:7294;}i:134;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7300;}i:135;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:34:"
git push -u origin marys-feature
";i:1;N;i:2;N;}i:2;i:7300;}i:136;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7300;}i:137;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:227:"This command pushes marys-feature to the central repository (origin), and the -u flag adds it as a remote tracking branch. After setting up the tracking branch, Mary can call git push without any parameters to push her feature.";}i:2;i:7344;}i:138;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7571;}i:139;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7571;}i:140;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:1;i:1;s:7:"#0000EE";}i:2;i:1;i:3;s:12:"<fc #0000EE>";}i:2;i:7573;}i:141;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:65:" Mary利用这里命令在中央仓库创建了自己的分支。";}i:2;i:3;i:3;s:65:" Mary利用这里命令在中央仓库创建了自己的分支。";}i:2;i:7585;}i:142;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:4;i:1;s:4:"#ff0";}i:2;i:4;i:3;s:5:"</fc>";}i:2;i:7650;}i:143;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7655;}i:144;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:7657;}i:145;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:26:"Mary 的任务开发完成";i:1;i:3;i:2;i:7657;}i:2;i:7657;}i:146;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:7657;}i:147;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7657;}i:148;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:51:":git_branch_model:git-workflow-feature-branch-4.png";i:1;s:27:"Git Workflows: Pull Request";i:2;s:6:"center";i:3;N;i:4;N;i:5;s:5:"cache";i:6;s:7:"details";}i:2;i:7693;}i:149;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7778;}i:150;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7778;}i:151;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:252:"When Mary gets back from lunch, she completes her feature. Before merging it into master, she needs to file a pull request letting the rest of the team know she's done. But first, she should make sure the central repository has her most recent commits:";}i:2;i:7780;}i:152;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8032;}i:153;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8032;}i:154;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:1;i:1;s:7:"#0000EE";}i:2;i:1;i:3;s:12:"<fc #0000EE>";}i:2;i:8034;}i:155;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:133:" 当Mary 午餐后，她完成了开发。为了让团队其他人了解她的工作，她先要向中央仓库分支提交代码： ";}i:2;i:3;i:3;s:133:" 当Mary 午餐后，她完成了开发。为了让团队其他人了解她的工作，她先要向中央仓库分支提交代码： ";}i:2;i:8046;}i:156;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:4;i:1;s:4:"#ff0";}i:2;i:4;i:3;s:5:"</fc>";}i:2;i:8179;}i:157;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8184;}i:158;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:10:"
git push
";i:1;N;i:2;N;}i:2;i:8191;}i:159;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8191;}i:160;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:44:"Then, she files the pull request in her Git ";}i:2;i:8211;}i:161;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"GUI";}i:2;i:8255;}i:162;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:249:" asking to merge marys-feature into master, and team members will be notified automatically. The great thing about pull requests is that they show comments right next to their related commits, so it's easy to ask questions about specific changesets.";}i:2;i:8258;}i:163;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8507;}i:164;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8507;}i:165;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:1;i:1;s:7:"#0000EE";}i:2;i:1;i:3;s:12:"<fc #0000EE>";}i:2;i:8509;}i:166;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:274:" 然后，在她的Git工具中，发起一个pull request,要求合并她的代码到主干，团队其他成员也会自动收到提示。 pull request 的特点之一就是可以在相关提交里写下评语。所以对于某个代码片段可以容易地发起评审。";}i:2;i:3;i:3;s:274:" 然后，在她的Git工具中，发起一个pull request,要求合并她的代码到主干，团队其他成员也会自动收到提示。 pull request 的特点之一就是可以在相关提交里写下评语。所以对于某个代码片段可以容易地发起评审。";}i:2;i:8521;}i:167;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:4;i:1;s:4:"#ff0";}i:2;i:4;i:3;s:5:"</fc>";}i:2;i:8795;}i:168;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8800;}i:169;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:8803;}i:170;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:26:"Bill 收到了合并请求";i:1;i:3;i:2;i:8803;}i:2;i:8803;}i:171;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:8803;}i:172;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8803;}i:173;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:51:":git_branch_model:git-workflow-feature-branch-5.png";i:1;s:37:"
Git Workflows: Feature Pull Requests";i:2;s:6:"center";i:3;N;i:4;N;i:5;s:5:"cache";i:6;s:7:"details";}i:2;i:8838;}i:174;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8933;}i:175;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8933;}i:176;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:215:"Bill gets the pull request and takes a look at marys-feature. He decides he wants to make a few changes before integrating it into the official project, and he and Mary have some back-and-forth via the pull request.";}i:2;i:8935;}i:177;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9150;}i:178;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9150;}i:179;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:1;i:1;s:7:"#0000EE";}i:2;i:1;i:3;s:12:"<fc #0000EE>";}i:2;i:9152;}i:180;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:162:" Bill收到合并请求，看到了Marry的分支。在合并Marry的代码前，Bill还要做一些变更，所以通过pull request和Marry做了一些沟通。";}i:2;i:3;i:3;s:162:" Bill收到合并请求，看到了Marry的分支。在合并Marry的代码前，Bill还要做一些变更，所以通过pull request和Marry做了一些沟通。";}i:2;i:9164;}i:181;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:4;i:1;s:4:"#ff0";}i:2;i:4;i:3;s:5:"</fc>";}i:2;i:9326;}i:182;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9331;}i:183;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:9333;}i:184;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:23:"Mary 继续修改代码";i:1;i:3;i:2;i:9333;}i:2;i:9333;}i:185;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:9333;}i:186;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9333;}i:187;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:51:":git_branch_model:git-workflow-feature-branch-6.png";i:1;s:38:"Git Workflows: Central Repository Push";i:2;s:6:"center";i:3;N;i:4;N;i:5;s:5:"cache";i:6;s:7:"details";}i:2;i:9366;}i:188;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9462;}i:189;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9462;}i:190;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:279:"To make the changes, Mary uses the exact same process as she did to create the first iteration of her feature. She edits, stages, commits, and pushes updates to the central repository. All her activity shows up in the pull request, and Bill can still make comments along the way.";}i:2;i:9464;}i:191;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9743;}i:192;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9743;}i:193;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:1;i:1;s:7:"#0000EE";}i:2;i:1;i:3;s:12:"<fc #0000EE>";}i:2;i:9745;}i:194;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:253:" Mary 就像第一轮过程，重复执行了编码，git add，git commit，git push 的工作。把代码提交到中央项目库分支。她的所有的变更历史都体现在pull request里，Bill 任然继续在pull request里执行代码评审。";}i:2;i:3;i:3;s:253:" Mary 就像第一轮过程，重复执行了编码，git add，git commit，git push 的工作。把代码提交到中央项目库分支。她的所有的变更历史都体现在pull request里，Bill 任然继续在pull request里执行代码评审。";}i:2;i:9757;}i:195;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:4;i:1;s:4:"#ff0";}i:2;i:4;i:3;s:5:"</fc>";}i:2;i:10010;}i:196;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10015;}i:197;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10015;}i:198;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:157:"If he wanted, Bill could pull marys-feature into his local repository and work on it on his own. Any commits he added would also show up in the pull request.";}i:2;i:10018;}i:199;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10175;}i:200;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10175;}i:201;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:1;i:1;s:7:"#0000EE";}i:2;i:1;i:3;s:12:"<fc #0000EE>";}i:2;i:10177;}i:202;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:169:" 如果有必要，Bill会 pull mary的代码分支进入他本地仓库，基于其上，继续工作。当让，任何Bill增加的提交都会想在pull request上。";}i:2;i:3;i:3;s:169:" 如果有必要，Bill会 pull mary的代码分支进入他本地仓库，基于其上，继续工作。当让，任何Bill增加的提交都会想在pull request上。";}i:2;i:10189;}i:203;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:4;i:1;s:4:"#ff0";}i:2;i:4;i:3;s:5:"</fc>";}i:2;i:10358;}i:204;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:0:"";}i:2;i:10363;}i:205;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10364;}i:206;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:10364;}i:207;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:34:"合并Mary代码到中央项目库";i:1;i:3;i:2;i:10364;}i:2;i:10364;}i:208;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:10364;}i:209;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10364;}i:210;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:51:":git_branch_model:git-workflow-feature-branch-7.png";i:1;s:0:"";i:2;s:6:"center";i:3;N;i:4;N;i:5;s:5:"cache";i:6;s:7:"details";}i:2;i:10407;}i:211;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:149:"
Once Bill is ready to accept the pull request, someone needs to merge the feature into the stable project (this can be done by either Bill or Mary):";}i:2;i:10465;}i:212;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10614;}i:213;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10614;}i:214;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:1;i:1;s:7:"#0000EE";}i:2;i:1;i:3;s:12:"<fc #0000EE>";}i:2;i:10616;}i:215;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:163:" 一旦Bill 决定接受pull request，就要有人去合并Mary的代码到稳定的中央项目仓库，（这个工作可以是Marry也可以是Bill来操作）";}i:2;i:3;i:3;s:163:" 一旦Bill 决定接受pull request，就要有人去合并Mary的代码到稳定的中央项目仓库，（这个工作可以是Marry也可以是Bill来操作）";}i:2;i:10628;}i:216;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:4;i:1;s:4:"#ff0";}i:2;i:4;i:3;s:5:"</fc>";}i:2;i:10791;}i:217;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10796;}i:218;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:69:"
git checkout master
git pull
git pull origin marys-feature
git push
";i:1;N;i:2;N;}i:2;i:10803;}i:219;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10803;}i:220;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:435:"First, whoever’s performing the merge needs to check out their master branch and make sure it’s up to date. Then, git pull origin marys-feature merges the central repository’s copy of marys-feature. You could also use a simple git merge marys-feature, but the command shown above makes sure you’re always pulling the most up-to-date version of the feature branch. Finally, the updated master needs to get pushed back to origin.";}i:2;i:10882;}i:221;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:11317;}i:222;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:11317;}i:223;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:327:"This process often results in a merge commit. Some developers like this because it’s like a symbolic joining of the feature with the rest of the code base. But, if you’re partial to a linear history, it’s possible to rebase the feature onto the tip of master before executing the merge, resulting in a fast-forward merge.";}i:2;i:11319;}i:224;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:11646;}i:225;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:11646;}i:226;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:271:"Some GUI’s will automate the pull request acceptance process by running all of these commands just by clicking an “Accept” button. If yours doesn’t, it should at least be able to automatically close the pull request when the feature branch gets merged into master";}i:2;i:11648;}i:227;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:11920;}i:228;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:11920;}i:229;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:31:"期间, John 也要同步代码";i:1;i:3;i:2;i:11920;}i:2;i:11920;}i:230;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:11920;}i:231;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:11920;}i:232;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:311:"While Mary and Bill are working on marys-feature and discussing it in her pull request, John is doing the exact same thing with his own feature branch. By isolating features into separate branches, everybody can work independently, yet it’s still trivial to share changes with other developers when necessary.";}i:2;i:11961;}i:233;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:12273;}i:234;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:12273;}i:235;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:21:"Where To Go From Here";i:1;i:2;i:2;i:12273;}i:2;i:12273;}i:236;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:12273;}i:237;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:12273;}i:238;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:319:"By now, you can hopefully see how feature branches are a way to quite literally multiply the functionality of the single master branch used in the Centralized Workflow. In addition, feature branches also facilitate pull requests, which makes it possible to discuss specific commits right inside of your version control ";}i:2;i:12306;}i:239;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"GUI";}i:2;i:12625;}i:240;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:12628;}i:241;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:12629;}i:242;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:12629;}i:243;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:334:"The Feature Branch Workflow is an incredibly flexible way to develop a project. The problem is, sometimes it’s too flexible. For larger teams, it’s often beneficial to assign more specific roles to different branches. The Gitflow Workflow is a common pattern for managing feature development, release preparation, and maintenance.";}i:2;i:12631;}i:244;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:12965;}i:245;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:12966;}i:246;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:12966;}}